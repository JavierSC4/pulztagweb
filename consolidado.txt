----- Inicio de migrations/alembic.ini -----
# A generic, single database configuration.

[alembic]
# template used to generate migration files
# file_template = %%(rev)s_%%(slug)s

# set to 'true' to run the environment during
# the 'revision' command, regardless of autogenerate
# revision_environment = false


# Logging configuration
[loggers]
keys = root,sqlalchemy,alembic,flask_migrate

[handlers]
keys = console

[formatters]
keys = generic

[logger_root]
level = WARN
handlers = console
qualname =

[logger_sqlalchemy]
level = WARN
handlers =
qualname = sqlalchemy.engine

[logger_alembic]
level = INFO
handlers =
qualname = alembic

[logger_flask_migrate]
level = INFO
handlers =
qualname = flask_migrate

[handler_console]
class = StreamHandler
args = (sys.stderr,)
level = NOTSET
formatter = generic

[formatter_generic]
format = %(levelname)-5.5s [%(name)s] %(message)s
datefmt = %H:%M:%S


----- Fin de migrations/alembic.ini -----

----- Inicio de migrations/env.py -----
import logging
from logging.config import fileConfig

from flask import current_app

from alembic import context

# this is the Alembic Config object, which provides
# access to the values within the .ini file in use.
config = context.config

# Interpret the config file for Python logging.
# This line sets up loggers basically.
fileConfig(config.config_file_name)
logger = logging.getLogger('alembic.env')


def get_engine():
    try:
        # this works with Flask-SQLAlchemy<3 and Alchemical
        return current_app.extensions['migrate'].db.get_engine()
    except TypeError:
        # this works with Flask-SQLAlchemy>=3
        return current_app.extensions['migrate'].db.engine


def get_engine_url():
    try:
        return get_engine().url.render_as_string(hide_password=False).replace(
            '%', '%%')
    except AttributeError:
        return str(get_engine().url).replace('%', '%%')


# add your model's MetaData object here
# for 'autogenerate' support
# from myapp import mymodel
# target_metadata = mymodel.Base.metadata
config.set_main_option('sqlalchemy.url', get_engine_url())
target_db = current_app.extensions['migrate'].db

# other values from the config, defined by the needs of env.py,
# can be acquired:
# my_important_option = config.get_main_option("my_important_option")
# ... etc.


def get_metadata():
    if hasattr(target_db, 'metadatas'):
        return target_db.metadatas[None]
    return target_db.metadata


def run_migrations_offline():
    """Run migrations in 'offline' mode.

    This configures the context with just a URL
    and not an Engine, though an Engine is acceptable
    here as well.  By skipping the Engine creation
    we don't even need a DBAPI to be available.

    Calls to context.execute() here emit the given string to the
    script output.

    """
    url = config.get_main_option("sqlalchemy.url")
    context.configure(
        url=url, target_metadata=get_metadata(), literal_binds=True
    )

    with context.begin_transaction():
        context.run_migrations()


def run_migrations_online():
    """Run migrations in 'online' mode.

    In this scenario we need to create an Engine
    and associate a connection with the context.

    """

    # this callback is used to prevent an auto-migration from being generated
    # when there are no changes to the schema
    # reference: http://alembic.zzzcomputing.com/en/latest/cookbook.html
    def process_revision_directives(context, revision, directives):
        if getattr(config.cmd_opts, 'autogenerate', False):
            script = directives[0]
            if script.upgrade_ops.is_empty():
                directives[:] = []
                logger.info('No changes in schema detected.')

    connectable = get_engine()

    with connectable.connect() as connection:
        context.configure(
            connection=connection,
            target_metadata=get_metadata(),
            process_revision_directives=process_revision_directives,
            **current_app.extensions['migrate'].configure_args
        )

        with context.begin_transaction():
            context.run_migrations()


if context.is_offline_mode():
    run_migrations_offline()
else:
    run_migrations_online()


----- Fin de migrations/env.py -----

----- Inicio de migrations/script.py.mako -----
"""${message}

Revision ID: ${up_revision}
Revises: ${down_revision | comma,n}
Create Date: ${create_date}

"""
from alembic import op
import sqlalchemy as sa
${imports if imports else ""}

# revision identifiers, used by Alembic.
revision = ${repr(up_revision)}
down_revision = ${repr(down_revision)}
branch_labels = ${repr(branch_labels)}
depends_on = ${repr(depends_on)}


def upgrade():
    ${upgrades if upgrades else "pass"}


def downgrade():
    ${downgrades if downgrades else "pass"}


----- Fin de migrations/script.py.mako -----

----- Inicio de static/css/style.css -----
/* Tipografía Global */
body {
    font-family: 'Roboto', sans-serif;
    background-color: #ffffff;
    color: #333333;
}

/* Encabezados */
h1,
h2,
h3,
h4,
h5,
h6 {
    font-family: 'Montserrat', sans-serif;
    color: #03c0ff;
}

/* Navbar */
.navbar-brand {
    font-family: 'Montserrat', sans-serif;
    font-size: 1.5rem;
}

.nav-link {
    color: #555555 !important;
    transition: color 0.3s;
}

.nav-link:hover {
    color: #03c0ff !important;
}

.nav-link.active {
    color: #03c0ff !important;
    font-weight: 500;
}

/* Footer */
footer {
    background-color: #f1f1f1;
    color: #555555;
}

footer a {
    color: #03c0ff;
    text-decoration: none;
}

footer a:hover {
    text-decoration: underline;
}

/* Botones Personalizados */
.btn-primary {
    background-color: #03c0ff;
    border-color: #03c0ff;
}

.btn-primary:hover {
    background-color: #02a8d1;
    border-color: #0290b8;
}

/* Jumbotron / Hero Section */
.jumbotron {
    background: linear-gradient(135deg, #ffffff 0%, #e6f7ff 100%);
    padding: 4rem 2rem;
    border-radius: 0.5rem;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.05);
}

.jumbotron h1 {
    color: #03c0ff;
}

.jumbotron p {
    color: #555555;
}

/* Clase para el fondo de las secciones de servicios */
.service-background {
    background: linear-gradient(135deg, #ffffff 0%, #e6f7ff 100%);
    padding: 2rem;
    border-radius: 0.5rem;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.05);
    transition: background 0.3s ease;
}

.service-background:hover {
    background: linear-gradient(135deg, #f0f8ff 0%, #d0e8ff 100%);
}

/* Estilo personalizado para el texto de precio */
.price {
    font-size: 1.5rem;
    font-weight: bold;
    color: #333333;
    transition: color 0.3s ease;
    text-align: center;
}

.price:hover {
    color: #555555; /* Color más claro al pasar el cursor */
}

/* Cards */
.card {
    border: none;
    border-radius: 0.5rem;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.05);
    transition: transform 0.3s, box-shadow 0.3s;
}

.card:hover {
    transform: translateY(-10px);
    box-shadow: 0 10px 15px rgba(0, 0, 0, 0.1);
}

.card-title {
    color: #03c0ff;
}

/* Links */
a {
    color: #03c0ff;
    transition: color 0.3s;
}

a:hover {
    color: #0290b8;
    text-decoration: none;
}

/* Formularios */
.form-control {
    border-radius: 0.3rem;
    border: 1px solid #ced4da;
}

.form-control:focus {
    border-color: #03c0ff;
    box-shadow: none;
}

/* Estilo para el botón de eliminación con ícono */
form button {
    display: inline-block;
    margin: 0;
    padding: 0.25rem 0.75rem;
    background-color: #dc3545;
    color: white;
    border: none;
    border-radius: 0.25rem;
    font-size: 0.875rem;
    cursor: pointer;
    transition: background-color 0.3s ease;
}

form button i {
    margin: 0;
    font-size: 1rem;
    color: white;
}

form button:hover {
    background-color: #c82333;
}

/* Responsividad en dispositivos móviles */
@media (max-width: 768px) {
    form button {
        font-size: 0.8rem;
        padding: 0.2rem 0.6rem;
    }

    form button i {
        font-size: 0.9rem;
    }
}

/* Color de los títulos y subtítulos en los formularios */
.form-title,
.form-subtitle {
    color: #03c0ff;
}

.card-header-custom {
    background: linear-gradient(135deg, #ffffff 0%, #ccefff 100%);
    color: #333333;
}

/* Estilo para la imagen de perfil en Pulzcard */
.profile-image {
    width: 150px;
    height: 150px;
    box-shadow: 0 8px 15px rgba(0, 0, 0, 0.2);
    transition: transform 0.3s ease, box-shadow 0.3s ease;
}

.profile-image:hover {
    transform: scale(1.05);
    box-shadow: 0 12px 20px rgba(0, 0, 0, 0.3);
}

/* Estilo para enlaces, botones y textos en Pulzcard */
.text-primary,
.btn-outline-primary,
.btn-outline-secondary,
.text-primary.text-decoration-none {
    color: #03c0ff !important;
}

.text-primary:hover,
.btn-outline-primary:hover,
.btn-outline-secondary:hover {
    color: #0290b8 !important;
}

/* Estilos para el botón "Agregar Contacto" */
.btn-outline-primary {
    border-color: #03c0ff;
    color: #03c0ff;
}

.btn-outline-primary:hover {
    background-color: #e0f7ff;
    color: #0290b8;
    border-color: #0290b8;
}

/* Estilos para el botón "Compartir URL" */
.btn-outline-secondary {
    border-color: #03c0ff;
    color: #03c0ff;
}

.btn-outline-secondary:hover {
    background-color: #e0f7ff;
    color: #0290b8;
    border-color: #0290b8;
}

form .form-control {
    margin-bottom: 1.5rem;
}

form .form-check {
    margin-bottom: 1rem;
}

form .btn {
    padding: 0.5rem 1.5rem;
}

/* Estilos para las etapas del formulario de pedido */
form h4 {
    color: #03c0ff;
    margin-bottom: 1rem;
}

.form-check-label {
    margin-left: 0.5rem;
}

/* Estilos para el campo de cantidad */
#cantidad {
    max-width: 200px;
}

/* Botón de Envío personalizado */
#submitBtn {
    padding: 0.75rem 2rem;
    font-size: 1rem;
}

/* Responsividad para dispositivos móviles */
@media (max-width: 768px) {
    .row.justify-content-center {
        flex-direction: column;
    }

    #cantidad {
        max-width: 100%;
    }

    form h4 {
        font-size: 1.25rem;
    }

    img.rounded.shadow {
        width: 100%;
    }
}

/* Estilos para carga de archivos */
.list-group-item {
    display: flex;
    justify-content: space-between;
    align-items: center;
}

.list-group-item button {
    margin-left: 10px;
    background: none;
    border: none;
    color: #ff4d4d;
    cursor: pointer;
    text-decoration: underline;
    padding: 0;
    font-size: 0.9rem;
}

.list-group-item button:hover {
    color: #cc0000;
}

/* Estilos para mensajes de error */
.text-danger {
    font-size: 0.9rem;
}

/* Estilos para alertas */
.alert-success {
    background-color: #d4edda;
    color: #155724;
    border-color: #c3e6cb;
}

.alert-danger {
    background-color: #f8d7da;
    color: #721c24;
    border-color: #f5c6cb;
}

.alert {
    margin-top: 20px;
}

.text-muted {
    color: #a7a7a7 !important;
}

/* Estilos para la sección de Soluciones Personalizadas */
.custom-solutions-section {
    background: linear-gradient(135deg, #03c0ff 0%, #02a8d1 100%);
    color: #fff;
    padding: 40px;
    border-radius: 10px;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
}

.custom-solutions-section h4 {
    font-size: 2.5rem;
    margin-bottom: 20px;
}

.solutions-list {
    display: flex;
    flex-wrap: wrap;
    justify-content: space-around;
}

.solution-item {
    flex: 1 1 220px;
    margin: 10px;
    background-color: rgba(255, 255, 255, 0.1);
    padding: 15px;
    border-radius: 10px;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
    transition: transform 0.3s ease;}

/* Botones personalizados */
.btn-custom-white {
    /* Degradado de transparente a blanco */
    background: linear-gradient(to bottom, #9cd6fd, transparent);
    
    color: #ffffff; /* Color de ícono en blanco */
    border: 2px solid #ffffff; /* Borde en blanco */
    transition: background 0.3s, color 0.3s;
    padding: 0.5rem;
    display: flex;
    align-items: center;
    justify-content: center;
    
    /* Opcional: añadir un poco de radio a las esquinas */
    border-radius: 4px;
}

/* Hover con color de fondo azul */
.btn-custom-white:hover {
    background-color: #fede9d;
    color: #ffffff;
    border-color: #93f66f;
}

/* Estilo específico para botones de solo ícono */
.btn-icon {
    padding: 0.5rem;
    width: 40px; /* Ajustar el tamaño del botón si es necesario */
    height: 40px; /* Ajustar el tamaño del botón si es necesario */
    border-radius: 50%; /* Hacer el botón circular */
}

----- Fin de static/css/style.css -----

----- Inicio de static/js/script.js -----
document.addEventListener('DOMContentLoaded', function () {
    // Logo Upload Elements
    const logoUpload = document.getElementById('logoUpload');
    const logoList = document.getElementById('logoList');
    const logoError = document.getElementById('logoError');
    let selectedLogos = [];

    // Excel Upload Elements
    const excelUpload = document.getElementById('excelUpload');
    const excelList = document.getElementById('excelList');
    const excelError = document.getElementById('excelError');
    let selectedExcel = null;

    // Manejar la selección de logos
    logoUpload.addEventListener('change', function (e) {
        const files = Array.from(e.target.files);
        for (let file of files) {
            if (selectedLogos.length >= 10) {
                logoError.style.display = 'block';
                break;
            }
            if (['image/png', 'image/jpeg', 'image/jpg'].includes(file.type)) {
                selectedLogos.push(file);
                displayLogo(file);
            }
        }
        // No restablezcas el valor del input
        // logoUpload.value = ''; // Comentado para permitir que los archivos se envíen
    });

    // Mostrar un logo en la lista
    function displayLogo(file) {
        const li = document.createElement('li');
        li.className = 'list-group-item d-flex justify-content-between align-items-center';
        li.textContent = file.name;

        const removeBtn = document.createElement('button');
        removeBtn.type = 'button';
        removeBtn.className = 'btn btn-danger btn-sm';
        removeBtn.textContent = 'Eliminar';
        removeBtn.addEventListener('click', function () {
            // Eliminar el archivo de selectedLogos
            selectedLogos = selectedLogos.filter((f) => f !== file);
            logoList.removeChild(li);
            logoError.style.display = 'none';

            // Actualizar el input de archivos
            updateLogoInput();
        });

        li.appendChild(removeBtn);
        logoList.appendChild(li);
    }

    // Actualizar el input de archivos para reflejar los archivos seleccionados
    function updateLogoInput() {
        const dataTransfer = new DataTransfer();
        selectedLogos.forEach((file) => {
            dataTransfer.items.add(file);
        });
        logoUpload.files = dataTransfer.files;
    }

    // Manejar la selección de Excel
    excelUpload.addEventListener('change', function (e) {
        const file = e.target.files[0];
        if (selectedExcel) {
            excelError.style.display = 'block';
            // Restablece el input para evitar múltiples archivos
            excelUpload.value = '';
            return;
        }
        if (file && ['application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', 'application/vnd.ms-excel'].includes(file.type)) {
            selectedExcel = file;
            displayExcel(file);
        }
    });

    // Mostrar el archivo Excel en la lista
    function displayExcel(file) {
        const li = document.createElement('li');
        li.className = 'list-group-item d-flex justify-content-between align-items-center';
        li.textContent = file.name;

        const removeBtn = document.createElement('button');
        removeBtn.type = 'button';
        removeBtn.className = 'btn btn-danger btn-sm';
        removeBtn.textContent = 'Eliminar';
        removeBtn.addEventListener('click', function () {
            selectedExcel = null;
            excelList.removeChild(li);
            excelError.style.display = 'none';
            excelUpload.value = ''; // Restablecer el input
        });

        li.appendChild(removeBtn);
        excelList.appendChild(li);
    }
});

----- Fin de static/js/script.js -----

----- Inicio de templates/pulzcard/card.html -----
{% extends 'base.html' %}

{% block title %}Tu Pulzcard - PulztagWeb{% endblock %}

{% block content %}
<style>
    /* Fondo personalizado solo para esta página */
    body {
        background-image: url('{{ url_for("static", filename="images/fondo_card3.jpg") }}');
        background-size: cover;
        background-position: center;
        background-repeat: no-repeat;
        color: #333333;
    }

    /* Fondo y estilo para el encabezado "Tu Pulzcard" */
    .card-header {
        background: linear-gradient(135deg, #01b9f6 0%, #02a4da 100%);
    }

    .card-header h3 {
        color: #ffffff;
        font-family: 'Myriad Pro', sans-serif;
        font-size: 1.7rem;
        font-weight: 700;
    }

    /* Estilo de fuente independiente para el nombre completo */
    .card-title {
        font-family: 'Myriad Pro', sans-serif;
        font-size: 2.2rem;
        font-weight: 700;
        color: #03c0ff;
    }

    /* Estilo independiente para posición y organización */
    .card-subtitle {
        font-family: 'Myriad Pro', sans-serif;
        font-size: 1.2rem;
        font-weight: 500;
        color: #9f9f9f;
        margin-top: 0.5rem;
    }

    /* Imagen de perfil con sombra y ajuste de tamaño */
    .profile-image {
        width: 200px;
        height: 200px;
        border: 0px solid #ffffff;
        object-fit: cover;
        transition: transform 0.3s ease, box-shadow 0.3s ease;
    }

    .profile-image:hover {
        transform: scale(1.1);
        box-shadow: 0 12px 20px rgba(0, 0, 0, 0.3);
    }

    /* Separador personalizado */
    hr {
        border-top: 2px solid #03c0ff;
        opacity: 0.8;
        width: 80%;
        margin: 1.5rem auto;
    }
</style>
<!-- Cargar Font Awesome 5.15.4 -->
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">

<!-- Espaciado Superior -->
<div style="margin: 100px;"></div>

<div class="container my-5">
    <div class="row justify-content-center">
        <div class="col-lg-6 col-md-8">
            <div class="card shadow-lg border-0 rounded-lg">
                <!-- Encabezado con logo y botones -->
                <div class="card-header text-white d-flex justify-content-between align-items-center p-3">
                    <!-- Logo a la izquierda -->
                    <div>
                        <img src="{{ url_for('static', filename='images/logocardv2.png') }}" alt="Pulztag Logo" height="30">
                    </div>                    
                    <!-- Botones a la derecha -->
                    <div class="d-flex gap-2">
                        <a href="{{ url_for('pulzcard_download_vcard', filename=card_id + '.vcf') }}" download="Pulzcard_{{ contact.full_name.replace(' ', '_') }}.vcf" class="btn btn-custom-white btn-icon">
                            <i class="fas fa-user-plus" style="font-size: 1.0em;"></i>
                        </a>
                        {% if current_user.is_authenticated %}
                        <!-- Botón Volver -->
                        <a href="{{ url_for('profile') }}" class="btn btn-custom-white btn-icon">
                            <i class="fas fa-chevron-right" style="font-size: 1.0em;"></i>
                        </a>
                        {% endif %}
                        <!--<button class="btn btn-custom-white" onclick="copyURL()">
                            <i class="fas fa-share-alt me-1"></i>Compartir URL
                        </button> -->
                        <input type="hidden" id="cardURL" value="{{ request.url }}">
                    </div>
                </div>
                <div style="margin: 10px;"></div>
                <div class="card-body text-center p-2">
                    <!-- Imagen de Perfil -->
                    <div class="mb-4">
                        <img src="{{ url_for('uploaded_file', filename=contact['image_file']) }}" alt="Imagen de Perfil" class="rounded-circle profile-image shadow-lg">
                    </div>

                    <h1 class="card-title font-weight-bold mb-3">{{ contact.full_name }}</h1>
                    <p class="card-subtitle">{{ contact.position }}, {{ contact.organization }}</p>
                    
                    <!-- Separador -->
                    <hr class="my-3">
                    
                    <!-- Información de Contacto -->
                    <div class="mt-4">
                        <p class="card-text">
                            <strong>Teléfono:</strong>
                            <a href="tel:{{ contact.phone }}" class="text-primary text-decoration-none">
                                <i class="fas fa-phone me-1"></i>{{ contact.phone }}
                            </a>
                        </p>
                        <p class="card-text">
                            <strong>Email:</strong>
                            <a href="mailto:{{ contact.email }}" class="text-primary text-decoration-none">
                                <i class="fas fa-envelope me-1"></i>{{ contact.email }}
                            </a>
                        </p>
                        <p class="card-text">
                            <strong>Página Web:</strong>
                            <a href="{{ contact.website }}" target="_blank" class="text-primary text-decoration-none">
                                <i class="fas fa-globe me-1"></i>{{ contact.website }}
                            </a>
                        </p>
                        <p class="card-text">
                            <i class="fas fa-map-marker-alt me-1"></i>
                            <strong>Dirección:</strong> {{ contact.address }}
                        </p>
                    </div>
                    
                    <!-- Instrucciones para Agregar Contacto -->
                    <div class="mt-4">
                        <h5 class="form-subtitle mb-3">Instrucciones:</h5>
                        <ul class="list-unstyled text-muted">
                            <li><i class="fab fa-android me-2"></i><strong>Android:</strong> Descarga y abre con la app de contactos.</li>
                            <li><i class="fab fa-apple me-2"></i><strong>iOS:</strong> Descarga y selecciona "Agregar a contactos".</li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Script para copiar URL al portapapeles -->
<script>
    function copyURL() {
        const url = document.getElementById('cardURL').value;
        navigator.clipboard.writeText(url).then(() => {
            showAlert('URL copiada al portapapeles!', 'success');
        }).catch(err => {
            showAlert('Error al copiar la URL: ' + err, 'danger');
        });
    }

    function showAlert(message, type) {
        const alertPlaceholder = document.createElement('div');
        alertPlaceholder.innerHTML = `
            <div class="alert alert-${type} alert-dismissible fade show" role="alert">
                ${message}
                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
            </div>
        `;
        document.body.appendChild(alertPlaceholder);
        setTimeout(() => {
            alertPlaceholder.remove();
        }, 3000);
    }
</script>
{% endblock %}

----- Fin de templates/pulzcard/card.html -----

----- Inicio de templates/pulzcard/index.html -----
{% extends 'base.html' %}

{% block title %}Crear Pulzcard - PulztagWeb{% endblock %}

{% block content %}
<h2 class="text-center mb-4">Crear Tu Tarjeta de Contacto NFC</h2>

<!-- Notificación de Error para URL Inválida -->
{% if form.website.errors %}
    <div class="notification error">
        Formato de URL para la página web es incorrecto.
    </div>
{% endif %}

<!-- Actualización: Añadir enctype para permitir la subida de archivos -->
<form method="POST" id="pulzcardForm" enctype="multipart/form-data" class="container">
    {{ form.hidden_tag() }}

    <!-- Mostrar errores globales del formulario, excluyendo 'website' -->
    {% if form.errors and not form.website.errors %}
        <div class="alert alert-danger">
            <ul class="mb-0">
                {% for field, errors in form.errors.items() %}
                    {% if field != 'website' %}
                        {% for error in errors %}
                            <li><strong>{{ field.replace('_', ' ').capitalize() }}:</strong> {{ error }}</li>
                        {% endfor %}
                    {% endif %}
                {% endfor %}
            </ul>
        </div>
    {% endif %}

    <!-- Datos Personales -->
    <h4 class="form-subtitle mb-3">Datos Personales</h4>
    <div class="row mb-3">
        <div class="col-md-6">
            {{ form.first_name.label(class="form-label") }}
            {{ form.first_name(class="form-control", placeholder="Nombre") }}
        </div>
        <div class="col-md-6">
            {{ form.last_name.label(class="form-label") }}
            {{ form.last_name(class="form-control", placeholder="Apellido") }}
        </div>
    </div>

    <div class="row mb-3">
        <div class="col-md-6">
            {{ form.phone.label(class="form-label") }}
            {{ form.phone(class="form-control", placeholder="Número Telefónico") }}
        </div>
        <div class="col-md-6">
            {{ form.email.label(class="form-label") }}
            {{ form.email(class="form-control", placeholder="Correo Electrónico") }}
        </div>
    </div>

    <!-- Información de la Empresa -->
    <h4 class="form-subtitle mb-3">Información de la Empresa</h4>
    <div class="row mb-3">
        <div class="col-md-6">
            {{ form.organization.label(class="form-label") }}
            {{ form.organization(class="form-control", placeholder="Nombre Organización") }}
        </div>
        <div class="col-md-6">
            {{ form.position.label(class="form-label") }}
            {{ form.position(class="form-control", placeholder="Cargo") }}
        </div>
    </div>

    <!-- Otros Detalles -->
    <h4 class="form-subtitle mb-3"">Otros Detalles</h4>
    <div class="row mb-3">
        <div class="col-md-6">
            {{ form.website.label(class="form-label") }}
            {{ form.website(class="form-control", placeholder="https://www.ejemplo.com", type="url", id="website") }}
            <span id="website-error" class="error-message"></span>
        </div>
        <div class="col-md-6">
            {{ form.address.label(class="form-label") }}
            {{ form.address(class="form-control", placeholder="Dirección") }}
        </div>
    </div>

    <!-- Foto de Perfil -->
    <h4 class="form-subtitle mb-3">Foto de Perfil</h4>
    <div class="form-group mb-4">
        {{ form.image_file.label(class="form-label") }}
        {{ form.image_file(class="form-control") }}
        {% for error in form.image_file.errors %}
            <div class="text-danger">{{ error }}</div>
        {% endfor %}
    </div>

    <!-- Nombre de la Tarjeta -->
    <h4 class="form-subtitle mb-3">Nombre de la Tarjeta</h4>
    <div class="form-group mb-4">
        {{ form.card_name.label(class="form-label") }}
        {{ form.card_name(class="form-control", placeholder="Nombre de Tarjeta") }}
    </div>

    <!-- Botón de Envío -->
    <div class="form-group text-center">
        {{ form.submit(class="btn btn-primary") }}
        <a href="{{ url_for('profile') }}" class="btn btn-secondary">Cancelar</a>
    </div>
</form>

<!-- Validación en tiempo real para URL -->
<script>
    document.getElementById('website').addEventListener('input', function() {
        const websiteInput = this;
        const errorSpan = document.getElementById('website-error');
        const urlPattern = /^(https?:\/\/)?([\w\-])+\.{1}([a-zA-Z]{2,63})([\/\w\-.?=&%]*)*\/?$/;

        if (websiteInput.value && !urlPattern.test(websiteInput.value)) {
            errorSpan.textContent = "Formato de URL de página web es incorrecto. Ej: https://www.ejemplo.com";
            errorSpan.style.color = "#721c24";
        } else {
            errorSpan.textContent = "";
        }
    });
</script>
{% endblock %}

----- Fin de templates/pulzcard/index.html -----

----- Inicio de templates/about.html -----
<!-- templates/about.html -->

{% extends 'base.html' %}

{% block title %}Acerca de - Pulztag{% endblock %}

{% block content %}
<div style="margin: 100px;"></div>
<!-- Sección Acerca de con Fondo de Degradado -->
<section class="jumbotron text-center mb-5">
    <div class="container">
        <h1 class="display-4">Acerca de Pulztag</h1>
        <p class="lead">Reinventando la interacción entre empresas y clientes con soluciones NFC innovadoras.</p>
    </div>
    <div class="container">
        <div class="row align-items-center mt-4">
            <!-- Texto Descriptivo -->
            <div class="col-md-6">
                <p>En <strong>Pulztag</strong>, reinventamos la interacción entre empresas y clientes con soluciones
                    NFC personalizadas y servicios a medida que impulsan el crecimiento y la fidelidad. Nuestra pasión por la
                    innovación nos posicionan como socios estratégicos en la era digital.</p>
                <p>Nos especializamos en diseñar dispositivos NFC adaptados a las necesidades específicas de cada negocio y proyecto.</p>
                <div class="text-center">
                    <a href="/contact" class="btn btn-primary mt-3 mb-4">Contáctanos</a>
                </div>
            </div>
            <!-- Imagen Representativa -->  
            <div class="col-md-6">
                <img src="{{ url_for('static', filename='images/acerca_de.jpeg') }}" class="img-fluid rounded shadow"
                    alt="Pulztag Innovación NFC">
            </div>
        </div>
    </div>
</section>

<!-- Línea de Separación -->
<hr class="my-5">

<!-- Nuestra Misión y Visión -->
<section class="mt-5">
    <div class="row">
        <!-- Misión -->
        <div class="col-md-6 mb-4">
            <div class="card text-center service-background h-100">
                <div class="card-body">
                    <i class="bi bi-flag" style="font-size: 2rem; color: #03c0ff;"></i>
                    <h5 class="card-title mt-3">Misión</h5>
                    <p class="card-text">Nuestra misión es transformar la manera en que las empresas interactúan con sus
                        clientes mediante soluciones NFC innovadoras y personalizadas que mejoran la eficiencia
                        operativa y fomentan la lealtad del cliente.</p>
                </div>
            </div>
        </div>
        <!-- Visión -->
        <div class="col-md-6 mb-4">
            <div class="card text-center service-background h-100">
                <div class="card-body">
                    <i class="bi bi-eye" style="font-size: 2rem; color: #03c0ff;"></i>
                    <h5 class="card-title mt-3">Visión</h5>
                    <p class="card-text">Nos visualizamos como líderes en el mercado de tecnología NFC, expandiendo
                        nuestras alianzas estratégicas y ofreciendo servicios de vanguardia que impulsen el crecimiento
                        y la competitividad de nuestros clientes a nivel global.</p>
                </div>
            </div>
        </div>
    </div>
</section>

<!-- Línea de Separación -->
<hr class="my-5">

<!-- Nuestros Valores -->
<section class="mt-5">
    <h3 class="text-center mb-4">Nuestros Valores</h3>
    <div class="row">
        <!-- Valor 1: Innovación -->
        <div class="col-md-4 mb-4">
            <div class="card text-center service-background">
                <div class="card-body">
                    <i class="bi bi-lightbulb" style="font-size: 2rem; color: #03c0ff;"></i>
                    <h5 class="card-title mt-3">Innovación</h5>
                    <p class="card-text">Nos mantenemos a la vanguardia de la tecnología NFC para ofrecer soluciones
                        únicas y efectivas.</p>
                </div>
            </div>
        </div>
        <!-- Valor 2: Calidad -->
        <div class="col-md-4 mb-4">
            <div class="card text-center service-background">
                <div class="card-body">
                    <i class="bi bi-award" style="font-size: 2rem; color: #03c0ff;"></i>
                    <h5 class="card-title mt-3">Calidad</h5>
                    <p class="card-text">Cada proyecto es ejecutado con altos estándares para garantizar la satisfacción
                        total de nuestros clientes.</p>
                </div>
            </div>
        </div>
        <!-- Valor 3: Colaboración -->
        <div class="col-md-4 mb-4">
            <div class="card text-center service-background">
                <div class="card-body">
                    <i class="bi bi-people-fill" style="font-size: 2rem; color: #03c0ff;"></i>
                    <h5 class="card-title mt-3">Colaboración</h5>
                    <p class="card-text">Trabajamos en estrecha colaboración con nuestros clientes para entender y
                        superar sus expectativas.</p>
                </div>
            </div>
        </div>
    </div>
</section>

<!-- Línea de Separación -->
<hr class="my-5">

<!-- Call to Action Section -->
<section class="text-center mt-5">
    <h2>¿Listo para Transformar tu Negocio?</h2>
    <p>Contáctanos hoy mismo y descubre cómo nuestras soluciones NFC pueden impulsar tu empresa.</p>
    <a class="btn btn-primary btn-lg" href="/contact" role="button">Contactar</a>
</section>

{% endblock %}

----- Fin de templates/about.html -----

----- Inicio de templates/account.html -----
<!-- templates/account.html -->

{% extends 'base.html' %}

{% block title %}Perfil de Usuario - PulztagWeb{% endblock %}

{% block content %}
<h2 class="text-center mb-4">Perfil de Usuario</h2>
<div class="row justify-content-center">
    <div class="col-md-6">
        <form method="POST" action="{{ url_for('account') }}">
            {{ form.hidden_tag() }}
            <div class="mb-3">
                {{ form.username.label(class="form-label") }}
                {{ form.username(class="form-control", placeholder="Nombre de Usuario") }}
                {% for error in form.username.errors %}
                    <div class="text-danger">{{ error }}</div>
                {% endfor %}
            </div>
            <div class="mb-3">
                {{ form.email.label(class="form-label") }}
                {{ form.email(class="form-control", placeholder="Correo Electrónico") }}
                {% for error in form.email.errors %}
                    <div class="text-danger">{{ error }}</div>
                {% endfor %}
            </div>
            <hr>
            <h5>Cambiar Contraseña</h5>
            <div class="mb-3">
                {{ form.password.label(class="form-label") }}
                {{ form.password(class="form-control", placeholder="Nueva Contraseña") }}
                {% for error in form.password.errors %}
                    <div class="text-danger">{{ error }}</div>
                {% endfor %}
            </div>
            <div class="mb-3">
                {{ form.confirm_password.label(class="form-label") }}
                {{ form.confirm_password(class="form-control", placeholder="Confirmar Nueva Contraseña") }}
                {% for error in form.confirm_password.errors %}
                    <div class="text-danger">{{ error }}</div>
                {% endfor %}
            </div>
            <button type="submit" class="btn btn-primary">{{ form.submit.label.text }}</button>
        </form>
    </div>
</div>
{% endblock %}


----- Fin de templates/account.html -----

----- Inicio de templates/base.html -----
<!-- templates/base.html -->

<!DOCTYPE html>
<html lang="es">

<head>
    <!-- Google Tag Manager -->
    <script>
        (function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':
        new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],
        j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=
        'https://www.googletagmanager.com/gtm.js?id=GTM-NC88XS28'+dl;f.parentNode.insertBefore(j,f);
        })(window,document,'script','dataLayer','GTM-NC88XS28');
    </script>
    <!-- End Google Tag Manager -->

    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{% block title %}Pulztag{% endblock %}</title>

    <!-- Google Fonts -->
    <link
        href="https://fonts.googleapis.com/css2?family=Montserrat:wght@500;700&family=Roboto:wght@400;500&display=swap"
        rel="stylesheet">

    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">

    <!-- Bootstrap Icons -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css">

    <!-- FontAwesome -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css" integrity="sha512-yHLOuw7MZ9Epjg6bQF+H9TQpvbIhFGHtf4mKje5G1Vj8V0G9/D8UpDqXlwCp4+jbg0y+6dV+lO84Sw9G2KzF0A==" crossorigin="anonymous" referrerpolicy="no-referrer" />

    <!-- CSS Personalizado con Parámetro de Versión para Evitar Caché -->
    <link rel="stylesheet" href="{{ url_for('static', filename='css/style.css') }}?v=1.0">

    {% block head %}{% endblock %}
</head>

<body>
    <!-- Google Tag Manager (noscript) -->
    <noscript>
        <iframe src="https://www.googletagmanager.com/ns.html?id=GTM-NC88XS28"
        height="0" width="0" style="display:none;visibility:hidden"></iframe>
    </noscript>
    <!-- End Google Tag Manager (noscript) -->
    
    <!-- Barra Superior -->
    <nav class="navbar navbar-expand-lg navbar-light bg-white shadow-sm fixed-top">
        <div class="container-fluid">
            <!-- Logo de la Navbar alineado a la izquierda -->
            <a class="navbar-brand text-primary fw-bold" href="/">
                <img src="{{ url_for('static', filename='images/logobasev4.png') }}" alt="Pulztag Logo" height="40">
            </a>
            
            <!-- Botón de navegación móvil -->
            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav"
                aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
                <span class="navbar-toggler-icon"></span>
            </button>
            
            <!-- Enlaces de Navegación centrados -->
            <div class="collapse navbar-collapse" id="navbarNav">
                <ul class="navbar-nav mx-auto"> <!-- Clase mx-auto para centrar -->
                    <li class="nav-item">
                        <a class="nav-link{% if request.path == '/' %} active{% endif %}" href="/">Inicio</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link{% if request.path == '/products' %} active{% endif %}" href="{{ url_for('products') }}">Productos</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link{% if request.path == '/services' %} active{% endif %}" href="{{ url_for('services') }}">Servicios</a>
                    </li>
                    <!--  <li class="nav-item">
                        <a class="nav-link{% if request.path.startswith('/pulzcard') %} active{% endif %}" href="{{ url_for('pulzcard') }}">Crear Pulzcard</a>
                    </li> -->
                    <li class="nav-item">
                        <a class="nav-link{% if request.path.startswith('/create_item') %} active{% endif %}" href="{{ url_for('create_item') }}">Crear item</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link{% if request.path == '/order' %} active{% endif %}" href="/order">Pedido</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link{% if request.path == '/about' %} active{% endif %}" href="/about">Acerca de</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link{% if request.path == '/contact' %} active{% endif %}" href="/contact">Contacto</a>
                    </li>
                </ul>
                
                <!-- Menú desplegable alineado a la derecha -->
                <ul class="navbar-nav ms-auto">
                    <li class="nav-item dropdown">
                        {% if current_user.is_authenticated %}
                        <a class="nav-link dropdown-toggle" href="#" id="userDropdown" role="button" data-bs-toggle="dropdown"
                            aria-expanded="false">
                            {{ current_user.username }}
                        </a>
                        <ul class="dropdown-menu dropdown-menu-end" aria-labelledby="userDropdown">
                            <li><a class="dropdown-item" href="{{ url_for('profile') }}">Perfil</a></li>
                            <li><hr class="dropdown-divider"></li>
                            <li><a class="dropdown-item" href="{{ url_for('logout') }}">Cerrar Sesión</a></li>
                        </ul>
                        {% else %}
                        <a class="nav-link dropdown-toggle" href="#" id="authDropdown" role="button" data-bs-toggle="dropdown"
                            aria-expanded="false">
                            Mi Cuenta
                        </a>
                        <ul class="dropdown-menu dropdown-menu-end" aria-labelledby="authDropdown">
                            <li><a class="dropdown-item" href="{{ url_for('login') }}">Iniciar Sesión</a></li>
                            <li><a class="dropdown-item" href="{{ url_for('register') }}">Crear Cuenta</a></li>
                        </ul>
                        {% endif %}
                    </li>
                </ul>
            </div>
        </div>
    </nav>

    <!-- Contenido Principal -->
    <div class="container mt-4">
        <!-- Mensajes Flash -->
        {% with messages = get_flashed_messages(with_categories=true) %}
        {% if messages %}
        <div class="row justify-content-center">
            <div class="col-md-8">
                {% for category, message in messages %}
                <div class="alert alert-{{ category }} alert-dismissible fade show" role="alert">
                    {{ message }}
                    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Cerrar"></button>
                </div>
                {% endfor %}
            </div>
        </div>
        {% endif %}
        {% endwith %}

        {% block content %}{% endblock %}
    </div>

    <!-- Footer -->
    <footer class="bg-light text-center py-4 mt-5">
        &copy; 2024 Pulztag. Todos los derechos reservados.
    </footer>

    <!-- Bootstrap JS y dependencias -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

    <!-- JS Personalizado -->
    <script src="{{ url_for('static', filename='js/script.js') }}"></script>

    {% block scripts %}{% endblock %}
</body>

</html>

----- Fin de templates/base.html -----

----- Inicio de templates/contact.html -----
<!-- templates/contact.html -->

{% extends 'base.html' %}

{% block title %}Contacto - PulztagWeb{% endblock %}

{% block content %}
<div style="margin: 100px;"></div>

<h2 class="text-center mb-4">Contáctanos</h2>
<p class="text-center mb-5">Estamos aquí para ayudarte. Completa el formulario a continuación y nos pondremos en contacto contigo lo antes posible.</p>

<div class="row justify-content-center">
    <div class="col-md-8">
        <form method="POST" action="{{ url_for('contact') }}">
            {{ form.hidden_tag() }}  <!-- Esto incluye el CSRF token -->
            <div class="mb-3">
                <label for="nombre" class="form-label">Nombre</label>
                {{ form.nombre(class="form-control", placeholder="Tu nombre", required=True) }}
            </div>
            <div class="mb-3">
                <label for="email" class="form-label">Correo Electrónico</label>
                {{ form.email(class="form-control", placeholder="nombre@ejemplo.com", required=True) }}
            </div>
            <div class="mb-3">
                <label for="mensaje" class="form-label">Mensaje</label>
                {{ form.mensaje(class="form-control", rows="5", placeholder="Tu mensaje", required=True) }}
            </div>
            <button type="submit" class="btn btn-primary">Enviar</button>
        </form>
    </div>
</div>

<!-- Línea de Separación -->
<hr class="my-5">

<!-- Información de Contacto Section -->
<div class="row justify-content-center mt-5">
    <div class="col-md-8">
        <div class="custom-solutions-section text-center p-5 rounded shadow">
            <h4 class="text-white">Información de Contacto</h4>
            <p class="text-white">Para más información, no dudes en ponerte en contacto con nosotros a través de los siguientes medios:</p>
            <ul class="list-unstyled">
                <li><strong>Correo Electrónico:</strong> <a href="mailto:contacto@pulztag.com" class="text-white">contacto@pulztag.com</a></li>
                <li><strong>Teléfono:</strong> <a href="tel:+56962411963" class="text-white">+56962411963</a></li>
                <li><strong>Instagram:</strong> <a href="https://www.instagram.com/pulztag" target="_blank" class="text-white">@pulztag</a></li>
            </ul>
        </div>
    </div>
</div>

<!-- Línea de Separación -->
<hr class="my-5">

{% endblock %}

----- Fin de templates/contact.html -----

----- Inicio de templates/edit_pulzcard.html -----
{% extends 'base.html' %}

{% block title %}Editar Pulzcard - PulztagWeb{% endblock %}

{% block content %}
<h2 class="text-center mb-4">Editar Pulzcard</h2>

<div class="row justify-content-center">
    <div class="col-md-8">
        <!-- Actualización: Añadir enctype para permitir la subida de archivos -->
        <form method="POST" action="{{ url_for('edit_pulzcard', card_id=pulzcard.card_id) }}" enctype="multipart/form-data">
            {{ form.hidden_tag() }}

            <!-- Sección: Datos Personales -->
            <h4 class="form-subtitle mb-3">Datos Personales</h4>
            <div class="row mb-3">
                <div class="col-md-6">
                    {{ form.first_name.label(class="form-label") }}
                    {{ form.first_name(class="form-control", placeholder="Nombre") }}
                    {% for error in form.first_name.errors %}
                        <div class="text-danger">{{ error }}</div>
                    {% endfor %}
                </div>
                <div class="col-md-6">
                    {{ form.last_name.label(class="form-label") }}
                    {{ form.last_name(class="form-control", placeholder="Apellido") }}
                    {% for error in form.last_name.errors %}
                        <div class="text-danger">{{ error }}</div>
                    {% endfor %}
                </div>
            </div>

            <div class="row mb-3">
                <div class="col-md-6">
                    {{ form.phone.label(class="form-label") }}
                    {{ form.phone(class="form-control", placeholder="Número Telefónico") }}
                    {% for error in form.phone.errors %}
                        <div class="text-danger">{{ error }}</div>
                    {% endfor %}
                </div>
                <div class="col-md-6">
                    {{ form.email.label(class="form-label") }}
                    {{ form.email(class="form-control", placeholder="Correo Electrónico") }}
                    {% for error in form.email.errors %}
                        <div class="text-danger">{{ error }}</div>
                    {% endfor %}
                </div>
            </div>

            <!-- Sección: Información de la Empresa -->
            <h4 class="form-subtitle mb-3">Información de la Empresa</h4>
            <div class="row mb-3">
                <div class="col-md-6">
                    {{ form.organization.label(class="form-label") }}
                    {{ form.organization(class="form-control", placeholder="Nombre Organización") }}
                    {% for error in form.organization.errors %}
                        <div class="text-danger">{{ error }}</div>
                    {% endfor %}
                </div>
                <div class="col-md-6">
                    {{ form.position.label(class="form-label") }}
                    {{ form.position(class="form-control", placeholder="Cargo") }}
                    {% for error in form.position.errors %}
                        <div class="text-danger">{{ error }}</div>
                    {% endfor %}
                </div>
            </div>

            <!-- Sección: Otros Detalles -->
            <h4 class="form-subtitle mb-3"">Otros Detalles</h4>
            <div class="row mb-3">
                <div class="col-md-6">
                    {{ form.website.label(class="form-label") }}
                    {{ form.website(class="form-control", placeholder="https://www.ejemplo.com", type="url", id="website") }}
                    <span id="website-error" class="error-message"></span>
                    {% for error in form.website.errors %}
                        <div class="text-danger">{{ error }}</div>
                    {% endfor %}
                </div>
                <div class="col-md-6">
                    {{ form.address.label(class="form-label") }}
                    {{ form.address(class="form-control", placeholder="Dirección") }}
                    {% for error in form.address.errors %}
                        <div class="text-danger">{{ error }}</div>
                    {% endfor %}
                </div>
            </div>

            <!-- Sección: Foto de Perfil -->
            <h4 class="form-subtitle mb-3"">Foto de Perfil</h4>
            <div class="mb-3">
                {{ form.image_file.label(class="form-label") }}
                {{ form.image_file(class="form-control") }}
                {% for error in form.image_file.errors %}
                    <div class="text-danger">{{ error }}</div>
                {% endfor %}
            </div>

            <!-- Sección: Nombre de la Tarjeta -->
            <h4 class="form-subtitle mb-3">Nombre de la Tarjeta</h4>
            <div class="mb-3">
                {{ form.card_name.label(class="form-label") }}
                {{ form.card_name(class="form-control", placeholder="Nombre de Tarjeta") }}
                {% for error in form.card_name.errors %}
                    <div class="text-danger">{{ error }}</div>
                {% endfor %}
            </div>

            <!-- Botones de Acción -->
            <div class="text-center mt-4">
                {{ form.submit(class="btn btn-primary") }}
                <a href="{{ url_for('profile') }}" class="btn btn-secondary">Cancelar</a>
            </div>
        </form>
    </div>
</div>

<!-- Validación en tiempo real para URL -->
<script>
    document.getElementById('website').addEventListener('input', function() {
        const websiteInput = this;
        const errorSpan = document.getElementById('website-error');
        const urlPattern = /^(https?:\/\/)?([\w\-])+\.{1}([a-zA-Z]{2,63})([\/\w\-.?=&%]*)*\/?$/;

        if (websiteInput.value && !urlPattern.test(websiteInput.value)) {
            errorSpan.textContent = "Formato de URL de página web es incorrecto. Ej: https://www.ejemplo.com";
            errorSpan.style.color = "#721c24";
        } else {
            errorSpan.textContent = "";
        }
    });
</script>
{% endblock %}

----- Fin de templates/edit_pulzcard.html -----

----- Inicio de templates/index.html -----
<!-- templates/index.html -->

<!-- Google Tag Manager -->
<script>(function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':
    new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],
    j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=
    'https://www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);
    })(window,document,'script','dataLayer','GTM-NC88XS28');</script>
    <!-- End Google Tag Manager -->

{% extends 'base.html' %}

{% block title %}Inicio - PulztagWeb{% endblock %}

{% block content %}
<div style="margin: 100px;"></div>
<!-- Hero Section -->
<div class="jumbotron text-center">
    <h1 class="display-4">Transforma tu Negocio con Tecnología NFC</h1>
    <p class="lead">Dispositivos NFC personalizados y servicios a medida para impulsar tu crecimiento.</p>
    <!-- Imagen: hero_image.jpg (Una imagen representativa de dispositivos NFC en uso) -->
</div>

<!-- Servicios Destacados -->
<section id="servicios" class="mt-5">
    <h2 class="text-center mb-4">Nuestros Servicios</h2>
    <div class="row">
        <div class="col-md-4">
            <div class="card text-center service-background">
                <!-- Imagen: servicios_personalizados.jpg (Imagen de dispositivos NFC personalizados) -->
                <img src="{{ url_for('static', filename='images/servicios_personalizados.jpeg') }}" class="card-img-top"
                    alt="Dispositivos NFC Personalizados">
                <div class="card-body">
                    <i class="bi bi-tools" style="font-size: 2rem; color: #03c0ff;"></i>
                    <h5 class="card-title mt-3">Dispositivos NFC Personalizados</h5>
                    <!-- Línea de Separación -->
                    <hr class="my-2">
                    <p class="card-text">Diseñamos y configuramos dispositivos NFC adaptados a las necesidades
                        específicas de tu negocio.</p>
                </div>
            </div>
        </div>
        <div class="col-md-4 mt-4 mt-md-0">
            <div class="card text-center service-background">
                <!-- Imagen: desarrollo_servicios.jpg (Imagen de desarrollo de software o servicios) -->
                <img src="{{ url_for('static', filename='images/desarrollo_servicios.jpeg') }}" class="card-img-top"
                    alt="Desarrollo de Servicios Personalizados">
                <div class="card-body">
                    <i class="bi bi-code-slash" style="font-size: 2rem; color: #03c0ff;"></i>
                    <h5 class="card-title mt-3">Desarrollo de Servicios Personalizados</h5>
                    <!-- Línea de Separación -->
                    <hr class="my-2">
                    <p class="card-text">Colaboramos contigo para crear soluciones únicas, como aplicaciones de y campañas de marketing NFC.</p>
                </div>
            </div>
        </div>
        <div class="col-md-4 mt-4 mt-md-0">
            <div class="card text-center service-background">
                <!-- Imagen: fidelizacion_clientes.jpg (Imagen representativa de fidelización de clientes) -->
                <img src="{{ url_for('static', filename='images/fidelizacion_clientes.jpeg') }}" class="card-img-top"
                    alt="Fidelización de Clientes">
                <div class="card-body">
                    <i class="bi bi-people-fill" style="font-size: 2rem; color: #03c0ff;"></i>
                    <h5 class="card-title mt-3">Fidelización y retención de Clientes</h5>
                    <!-- Línea de Separación -->
                    <hr class="my-2">
                    <p class="card-text">Implementamos programas de fidelización utilizando tecnología NFC para
                        fortalecer la relación con tus clientes.</p>
                </div>
            </div>
        </div>
    </div>
</section>

<!-- Línea de Separación -->
<hr class="my-5">
    <!-- Invitación a Crear tu Pulzcard -->
    <section class="mt-5 text-center">
        <h2>Crea tu Pulzcard</h2>
        <p>Comparte tu información de contacto de manera innovadora y eficiente con nuestra Pulzcard. Con esta tarjeta NFC personalizada, tus clientes podrán acceder a tus datos de contacto con solo un toque, facilitando el networking y fortaleciendo tus relaciones comerciales.</p>
        <a class="btn btn-primary btn-lg" href="{{ url_for('pulzcard') }}" role="button">Crear Pulzcard</a>
    </section>

    <!-- Línea de Separación -->
<hr class="my-5">

<!-- Invitación a Ver Productos -->
<section class="text-center mt-5">
    <h2>Explora Nuestros Productos</h2>
    <p>Descubre nuestra gama de dispositivos NFC personalizados diseñados para impulsar tu negocio.</p>
</section>
<div style="margin: 40px;"></div>

    <!-- Etiquetas NFC Section: Texto Izquierda / Imagen Derecha -->
    <div class="row mb-5">
        <div class="col-md-6">
            <h4>Etiquetas NFC</h4>
            <p>Tokens de plástico con tecnología NFC, ideales para campañas de marketing, eventos, y fidelización.</p>
            <ul>
                <li>Dimensiones: 30.0 mm diámetro x 0.9 mm espesor</li>
                <li>Materiales: PVC y metálico</li>
                <li>Resistentes al agua</li>
                <li>Opciones de adhesivo: Media resistencia o alta resistencia</li>
                <li>Aplicaciones: Promociones, eventos, logística.</li>
            </ul>
            <p class="price text-center mt-3">
                <a href="{{ url_for('order') }}" class="price-link">Desde <span class="price-value">$2.990</span> (IVA inc.)</a>
            </p>
        </div>
        <div class="col-md-6">
            <img src="/static/images/etiquetas_nfc.jpeg" alt="Etiquetas NFC" class="img-fluid rounded shadow" style="max-width: 85%; height: auto;">
        </div>
    </div>

<!-- Línea de Separación -->
<hr class="my-5">

    <!-- Tarjetas NFC Personalizadas Section: Texto Derecha / Imagen Izquierda -->
    <div class="row mb-5">
        <div class="col-md-6">
            <h4>Tarjetas NFC Personalizadas</h4>
            <p>Tarjetas de PVC rígido con impresión de alta calidad por ambas caras, ideales para contacto instantáneo, vCards, y campañas publicitarias.</p>
            <ul>
                <li>Dimensiones: 85.60 mm x 53.98 mm x 0.76 mm</li>
                <li>Colores: Blanco y Negro</li>
                <li>Material: PVC</li>
                <li>Aplicaciones: Contacto instantáneo, enlaces a vCards, apertura de apps, campañas publicitarias.</li>
            </ul>
            <p class="price text-center mt-3">
                <a href="{{ url_for('order') }}" class="price-link">Desde <span class="price-value">$4.990</span> (IVA inc.)</a>
            </p>
        </div>
        <div class="col-md-6 order-md-1">
            <img src="/static/images/tarjetas_nfc.jpeg" alt="Tarjetas NFC Personalizadas" class="img-fluid rounded shadow" style="max-width: 85%; height: auto;">
        </div>
    </div>

<!-- Línea de Separación -->
<hr class="my-5">

    <!-- Stickers NFC Section: Texto Izquierda / Imagen Derecha -->
    <div class="row mb-5">
        <div class="col-md-6">
            <h4>Stickers NFC</h4>
            <p>Stickers personalizables con tecnología NFC, disponibles en diseños predefinidos o completamente personalizados con el branding de tu empresa.</p>
            <ul>
                <li>Impresión: Una o dos caras</li>
                <li>Material: PVC o adhesivo fuerte</li>
                <li>Aplicaciones: Branding, marketing interactivo, logística.</li>
            </ul>
            <p class="price text-center mt-3">
                <a href="{{ url_for('order') }}" class="price-link">Desde <span class="price-value">$2.990</span> (IVA inc.)</a>
            </p>
        </div>
        <div class="col-md-6">
            <img src="/static/images/stickers_nfc.jpg" alt="Stickers NFC" class="img-fluid rounded shadow" style="max-width: 85%; height: auto;">
        </div>
    </div>

<!-- Línea de Separación -->
<hr class="my-5">

<!-- Clientes y Alianzas
<!--<section class="mt-5">
    <h2 class="text-center mb-4">Nuestros Clientes y Alianzas</h2>
    <div class="row justify-content-center">
        <div class="col-md-4 text-center">
            <!-- Imagen: cliente1_logo.jpg (Logo del cliente 1)
            <img src="{{ url_for('static', filename='images/cliente1_logo.jpeg') }}" class="img-fluid mb-3"
                alt="Cliente 1 Logo">
        </div>
        <div class="col-md-4 text-center mt-4 mt-md-0">
            <!-- Imagen: cliente2_logo.jpg (Logo del cliente 2)
            <img src="{{ url_for('static', filename='images/cliente2_logo.jpeg') }}" class="img-fluid mb-3"
                alt="Cliente 2 Logo">
        </div>
        <div class="col-md-4 text-center mt-4 mt-md-0">
            <!-- Imagen: cliente3_logo.jpg (Logo del cliente 3)
            <img src="{{ url_for('static', filename='images/cliente3_logo.jpeg') }}" class="img-fluid mb-3"
                alt="Cliente 3 Logo">
        </div>
    </div>
    <!-- Puedes agregar más logos o testimonios según sea necesario
</section>

<!-- Call to Action Section -->
<section class="text-center mt-5">
    <h2>¿Listo para Transformar tu Negocio?</h2>
    <p>Contáctanos hoy mismo y descubre cómo nuestras soluciones NFC pueden impulsar tu empresa.</p>
    <a class="btn btn-primary btn-lg" href="/contact" role="button">Contactar</a>
</section>
{% endblock %}

----- Fin de templates/index.html -----

----- Inicio de templates/login.html -----
<!-- templates/login.html -->

{% extends 'base.html' %}

{% block title %}Iniciar Sesión - PulztagWeb{% endblock %}

{% block content %}
<h2 class="text-center mb-4">Iniciar Sesión</h2>
<div class="row justify-content-center">
    <div class="col-md-6">
        <form method="POST" action="{{ url_for('login') }}">
            {{ form.hidden_tag() }}
            <!-- Campo oculto para el parámetro 'next' -->
            <input type="hidden" name="next" value="{{ request.args.get('next') }}">
            <div class="mb-3">
                {{ form.email.label(class="form-label") }}
                {{ form.email(class="form-control", placeholder="Correo Electrónico") }}
                {% for error in form.email.errors %}
                    <div class="text-danger">{{ error }}</div>
                {% endfor %}
            </div>
            <div class="mb-3">
                {{ form.password.label(class="form-label") }}
                {{ form.password(class="form-control", placeholder="Contraseña") }}
                {% for error in form.password.errors %}
                    <div class="text-danger">{{ error }}</div>
                {% endfor %}
            </div>
            <div class="form-check mb-3">
                {{ form.remember(class="form-check-input") }}
                {{ form.remember.label(class="form-check-label") }}
            </div>
            <button type="submit" class="btn btn-primary">{{ form.submit.label.text }}</button>
        </form>
        <p class="mt-3"><a href="{{ url_for('reset_request') }}">¿Olvidaste tu contraseña?</a></p>
        <p>¿No tienes una cuenta? <a href="{{ url_for('register') }}">Regístrate</a></p>
    </div>
</div>
{% endblock %}

----- Fin de templates/login.html -----

----- Inicio de templates/order.html -----
<!-- templates/order.html -->

<!-- Google Tag Manager -->
<script>(function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':
    new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],
    j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=
    'https://www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);
    })(window,document,'script','dataLayer','GTM-NC88XS28');</script>
    <!-- End Google Tag Manager -->

{% extends 'base.html' %}

{% block title %}Pedido - PulztagWeb{% endblock %}

{% block content %}
<div style="margin: 80px;"></div>
<h2 class="text-center mb-4">Realiza tu Pedido</h2>
<p class="text-center mb-5">Completa el formulario a continuación para realizar tu pedido de dispositivos NFC personalizados.</p>

<div class="row justify-content-center">
    <div class="col-md-8 mb-4">
        <form method="POST" action="{{ url_for('order') }}" enctype="multipart/form-data" id="orderForm">
            {{ form.hidden_tag() }} <!-- CSRF token -->

            <!-- Campos del formulario -->
            <div class="mb-3">
                <label for="nombre" class="form-label">Nombre</label>
                <input type="text" class="form-control" id="nombre" name="nombre" placeholder="Tu nombre" required>
            </div>
            <div class="mb-3">
                <label for="email" class="form-label">Correo Electrónico</label>
                <input type="email" class="form-control" id="email" name="email" placeholder="nombre@ejemplo.com" required>
            </div>
            <div class="mb-3">
                <label for="dispositivo" class="form-label">Selecciona un Dispositivo</label>
                <select class="form-select" id="dispositivo" name="dispositivo" required>
                    <option value="" disabled selected>Elige una opción</option>
                    <option value="NFC Token de PVC (30 mm)">NFC Token de PVC (30 mm)</option>
                    <option value="NFC Sticker (25 mm)">NFC Sticker (25 mm)</option>
                    <option value="NFC Cards">NFC Cards</option>
                    <!-- Agrega más opciones según sea necesario -->
                </select>
            </div>
            <div class="mb-3">
                <label for="mensaje" class="form-label">¿Qué necesitas?</label>
                <textarea class="form-control" id="mensaje" name="mensaje" rows="3" placeholder="Escribe tu mensaje aquí" required></textarea>
            </div>

            <!-- Sección para subir Logos -->
            <div class="mb-4">
                <label class="form-label">Subir Logos (png, jpeg, jpg) - Máximo 10 (*)</label>
                <input type="file" class="form-control" id="logoUpload" name="logos" accept=".png,.jpeg,.jpg" multiple>
                <ul class="list-group mt-2" id="logoList"></ul>
                <div id="logoError" class="text-danger mt-2" style="display: none;">Has alcanzado el máximo de 10 logos.</div>
                <p class="text-muted mt-2">(*) Sube aquí las imágenes que deseas imprimir en tus dispositivos personalizados. Nuestro equipo se encargará de ayudarte con la implementación y asegurará que tus diseños se vean espectaculares!</p>
            </div>

            <!-- Sección para subir Archivo Excel -->
            <div class="mb-4">
                <label class="form-label">Subir Archivo Excel (xlsx, xls) - Máximo 1 (*)</label>
                <input type="file" class="form-control" id="excelUpload" name="excel" accept=".xlsx,.xls">
                <ul class="list-group mt-2" id="excelList"></ul>
                <div id="excelError" class="text-danger mt-2" style="display: none;">Solo puedes subir un archivo Excel.</div>
                <p class="text-muted mt-2">(*) Cada dispositivo puede tener una configuración única. Para pedidos de gran volumen, por favor proporciona los detalles en un archivo Excel.</p>
            </div>
            <button type="submit" class="btn btn-primary">Enviar solicitud</button>
        </form>
    </div>
</div>

<!-- Línea de Separación -->
<hr class="my-5">

<!-- Información Bancaria Section -->
<div class="row justify-content-center mt-5">
    <div class="col-md-8">
        <div class="custom-solutions-section text-center p-5 rounded shadow">
            <h4 class="text-white">Datos para Transferencia</h4>
            <ul class="list-unstyled">
                <li><strong>Banco:</strong> Banco de Chile</li>
                <li><strong>Tipo de Cuenta:</strong> Cuenta Corriente</li>
                <li><strong>Nombre:</strong> Pulztag SpA</li>
                <li><strong>Número de Cuenta:</strong> 00-888-08888-08</li>
                <li><strong>RUT:</strong> 88.888.888-8</li>
                <li><strong>Correo:</strong> <a href="mailto:contacto@pulztag.com" class="text-white">contacto@pulztag.com</a></li>
                <li><strong>Teléfono:</strong> <a href="tel:+56962411963" class="text-white">+56962411963</a></li>
            </ul>
        </div>
    </div>
</div>

<!-- Línea de Separación -->
<hr class="my-5">

{% endblock %}

----- Fin de templates/order.html -----

----- Inicio de templates/products.html -----
<!-- templates/order.html -->

{% extends 'base.html' %}

{% block title %}Nuestros Productos - PulztagWeb{% endblock %}

{% block content %}
<div style="margin: 100px;"></div>
    <h2 class="text-center mb-4">Nuestros Productos</h2>
    <p class="text-center mb-5">Descubre nuestras soluciones de NFC y RFID personalizadas para diversas industrias.</p>

    <!-- Etiquetas NFC Section: Texto Izquierda / Imagen Derecha -->
    <div class="row mb-5">
        <div class="col-md-6">
            <h4>Etiquetas NFC</h4>
            <p>Tokens de plástico con tecnología NFC, ideales para campañas de marketing, eventos, y fidelización.</p>
            <ul>
                <li>Dimensiones: 30.0 mm diámetro x 0.9 mm espesor</li>
                <li>Materiales: PVC y metálico</li>
                <li>Resistentes al agua</li>
                <li>Opciones de adhesivo: Media resistencia o alta resistencia</li>
                <li>Aplicaciones: Promociones, eventos, logística.</li>
            </ul>
            <p class="price text-center mt-3">
                <a href="{{ url_for('order') }}" class="price-link">Desde <span class="price-value">$2.990</span> (IVA inc.)</a>
            </p>
        </div>
        <div class="col-md-6">
            <img src="/static/images/etiquetas_nfc.jpeg" alt="Etiquetas NFC" class="img-fluid rounded shadow" style="max-width: 85%; height: auto;">
        </div>
    </div>

<!-- Línea de Separación -->
<hr class="my-5">

    <!-- Tarjetas NFC Personalizadas Section: Texto Derecha / Imagen Izquierda -->
    <div class="row mb-5">
        <div class="col-md-6">
            <h4>Tarjetas NFC Personalizadas</h4>
            <p>Tarjetas de PVC rígido con impresión de alta calidad por ambas caras, ideales para contacto instantáneo, vCards, y campañas publicitarias.</p>
            <ul>
                <li>Dimensiones: 85.60 mm x 53.98 mm x 0.76 mm</li>
                <li>Colores: Blanco y Negro</li>
                <li>Material: PVC</li>
                <li>Aplicaciones: Contacto instantáneo, enlaces a vCards, apertura de apps, campañas publicitarias.</li>
            </ul>
            <p class="price text-center mt-3">
                <a href="{{ url_for('order') }}" class="price-link">Desde <span class="price-value">$4.990</span> (IVA inc.)</a>
            </p>
        </div>
        <div class="col-md-6 order-md-1">
            <img src="/static/images/tarjetas_nfc.jpeg" alt="Tarjetas NFC Personalizadas" class="img-fluid rounded shadow" style="max-width: 85%; height: auto;">
        </div>
    </div>

    <!-- Línea de Separación -->
    <hr class="my-5">

    <!-- Stickers NFC Section: Texto Izquierda / Imagen Derecha -->
    <div class="row mb-5">
        <div class="col-md-6">
            <h4>Stickers NFC</h4>
            <p>Stickers personalizables con tecnología NFC, disponibles en diseños predefinidos o completamente personalizados con el branding de tu empresa.</p>
            <ul>
                <li>Impresión: Una o dos caras</li>
                <li>Material: PVC o adhesivo fuerte</li>
                <li>Aplicaciones: Branding, marketing interactivo, logística.</li>
            </ul>
            <p class="price text-center mt-3">
                <a href="{{ url_for('order') }}" class="price-link">Desde <span class="price-value">$2.990</span> (IVA inc.)</a>
            </p>
        </div>
        <div class="col-md-6">
            <img src="/static/images/stickers_nfc.jpg" alt="Stickers NFC" class="img-fluid rounded shadow" style="max-width: 85%; height: auto;">
        </div>
    </div>

    <!-- Línea de Separación -->
    <hr class="my-5">

    <!-- Invitación a Crear tu Pulzcard -->
    <section class="mt-5 text-center">
        <h2>Crea tu Pulzcard</h2>
        <p>Comparte tu información de contacto de manera innovadora y eficiente con nuestra Pulzcard. Con esta tarjeta NFC personalizada, tus clientes podrán acceder a tus datos de contacto con solo un toque, facilitando el networking y fortaleciendo tus relaciones comerciales.</p>
        <a class="btn btn-primary btn-lg" href="{{ url_for('create_item') }}" role="button">Crear Pulztag</a>
    </section>
</div>
{% endblock %}

----- Fin de templates/products.html -----

----- Inicio de templates/profile.html -----
<!-- templates/profile.html -->

{% extends 'base.html' %}

{% block title %}Perfil de Usuario - PulztagWeb{% endblock %}

{% block content %}
<div style="margin: 100px;"></div>
<h2 class="text-center mb-4">Mi Perfil</h2>

<!-- Información del Usuario -->
<div class="row mb-5">
    <div class="col-md-6">
        <h4>Información Personal</h4>
        <p><strong>Nombre de Usuario:</strong> {{ current_user.username }}</p>
        <p><strong>Correo Electrónico:</strong> {{ current_user.email }}</p>
    </div>
    <div class="col-md-6 text-end">
        <a href="{{ url_for('account') }}" class="btn btn-primary">Editar Perfil</a>
    </div>
</div>

<!-- Línea de Separación -->
<hr class="my-5">

<!-- Cargar Font Awesome temporalmente en esta sección -->
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">

<!-- Lista de Pulzcards -->
<div class="row">
    <div class="col-md-12">
        <h4>Tus Pulzcards</h4>
        {% if pulzcards %}
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th>Nombre de Tarjeta</th>
                        <th>Nombre Completo</th>
                        <th>Organización</th>
                        <th>Email</th>
                        <th>Fecha de Creación</th>
                        <th>Acciones</th>
                    </tr>
                </thead>
                <tbody>
                    {% for card in pulzcards %}
                    <tr>
                        <td>{{ card.card_name }}</td>
                        <td>{{ card.first_name }} {{ card.last_name }}</td>
                        <td>{{ card.organization }}</td>
                        <td>{{ card.email }}</td>
                        <td>{{ card.created_at.strftime('%d/%m/%Y %H:%M') }}</td>
                        <td>
                            <a href="{{ url_for('pulzcard_card', card_id=card.card_id) }}" class="btn btn-outline-secondary btn-sm" target="_blank">Ver</a>
                            <a href="{{ url_for('edit_pulzcard', card_id=card.card_id) }}" class="btn btn-outline-secondary btn-sm">Editar</a>
                            <form action="{{ url_for('delete_pulzcard', card_id=card.card_id) }}" method="POST" style="display:inline;">
                                {{ delete_forms[card.id].hidden_tag() }}
                                <button type="submit" onclick="return confirm('¿Estás seguro de que deseas eliminar esta Pulzcard? Esta acción no se puede deshacer.')" style="background:none; border:none; padding:0; cursor:pointer;">
                                    <i class="fas fa-trash" style="color: rgb(252, 42, 0); font-size: 1.8em;"></i>
                                </button>
                            </form>
                        </td>
                    </tr>
                    {% endfor %}
                </tbody>
            </table>
        {% else %}
            <p>No has creado ninguna Pulzcard aún. <a href="{{ url_for('pulzcard') }}">Crear una Pulzcard</a>.</p>
        {% endif %}
        
        <!-- Hipervínculo para Crear una Nueva Pulzcard -->
        <div class="mt-3">
            <a href="{{ url_for('pulzcard') }}" class="btn btn-secondary">
                <i class="fas fa-user-plus" style="color: rgb(255, 255, 255); font-size: 1.0em;"></i>Añadir
            </a>
        </div>
    </div>
</div>

<!-- Línea de Separación -->
<hr class="my-5">

<!-- Lista de Etiquetas -->
<div class="row">
    <div class="col-md-12 mt-5">
        <h4>Tus Etiquetas</h4>
        {% if tags %}
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th>Nombre de Etiqueta</th>
                        <th>URL (a redireccionar)</th>
                        <th>URL Generada</th>
                        <th>Acciones</th>
                    </tr>
                </thead>
                <tbody>
                    {% for tag in tags %}
                    <tr>
                        <td>{{ tag.tag_name }}</td>
                        <td>
                            {% set redirect_url_display = tag.redirect_url[:30] + '...' if tag.redirect_url|length > 30 else tag.redirect_url %}
                            <a href="{{ tag.redirect_url }}" target="_blank">{{ redirect_url_display }}</a>
                        </td>
                        <td>
                            {% set generated_url = url_for('redirect_tag', tag_id=tag.tag_id, _external=True) %}
                            {% set shortened_url = generated_url[:30] + '...' if generated_url|length > 30 else generated_url %}
                            <a href="{{ generated_url }}" target="_blank">{{ shortened_url }}</a>
                        </td>
                        <td>
                            <button class="btn btn-outline-secondary btn-sm" onclick="copyURL('{{ generated_url }}')">Copiar URL</button>
                            <a href="{{ url_for('edit_tag', tag_id=tag.tag_id) }}" class="btn btn-outline-secondary btn-sm">Editar</a>
                            <form action="{{ url_for('delete_tag', tag_id=tag.tag_id) }}" method="POST" style="display:inline;">
                                {{ delete_tag_forms[tag.id].hidden_tag() }}
                                <button type="submit" onclick="return confirm('¿Estás seguro de que deseas eliminar esta etiqueta? Esta acción no se puede deshacer.')" style="background:none; border:none; padding:0; cursor:pointer;">
                                    <i class="fas fa-trash" style="color: rgb(252, 42, 0); font-size: 1.8em;"></i>
                                </button>
                            </form>
                        </td>
                    </tr>
                    {% endfor %}
                </tbody>
            </table>
        {% else %}
            <p>No has creado ninguna etiqueta aún. <a href="#" class="text-decoration-underline" data-bs-toggle="modal" data-bs-target="#agregarEtiquetaModal">Crear una Etiqueta</a>.</p>        {% endif %}
        
        <!-- Botón para Agregar una Nueva Etiqueta -->
        <div class="mt-3">
            <button type="button" class="btn btn-secondary" data-bs-toggle="modal" data-bs-target="#agregarEtiquetaModal">
                <i class="fas fa-tag" style="color: rgb(255, 255, 255); font-size: 1.0em;"></i> Añadir
            </button>
        </div>
    </div>
</div>

<!-- Línea de Separación -->
<hr class="my-5">

<!-- Formulario para agregar una nueva Etiqueta dentro de una Modal -->
<!-- Modal -->
<div class="modal fade" id="agregarEtiquetaModal" tabindex="-1" aria-labelledby="agregarEtiquetaModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <form method="POST" action="{{ url_for('profile') }}">
          {{ tag_form.hidden_tag() }}
          <div class="modal-header">
            <h5 class="modal-title" id="agregarEtiquetaModalLabel">Agregar Nueva Etiqueta</h5>
            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Cerrar"></button>
          </div>
          <div class="modal-body">
              <div class="mb-3">
                  {{ tag_form.tag_name.label(class="form-label") }}
                  {{ tag_form.tag_name(class="form-control", placeholder="Nombre de Tu Etiqueta") }}
                  {% for error in tag_form.tag_name.errors %}
                      <div class="text-danger">{{ error }}</div>
                  {% endfor %}
              </div>
              <div class="mb-3">
                  {{ tag_form.redirect_url.label(class="form-label") }}
                  {{ tag_form.redirect_url(class="form-control", placeholder="URL a redireccionar") }}
                  {% for error in tag_form.redirect_url.errors %}
                      <div class="text-danger">{{ error }}</div>
                  {% endfor %}
              </div>
          </div>
          <div class="modal-footer">
            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
            {{ tag_form.submit(class="btn btn-success") }}
          </div>
      </form>
    </div>
  </div>
</div>

<!-- Script for copying URL to clipboard -->
<script>
    function copyURL(url) {
        navigator.clipboard.writeText(url).then(() => {
            showAlert('URL generada copiada al portapapeles!', 'success');
        }).catch(err => {
            showAlert('Error al copiar la URL: ' + err, 'danger');
        });
    }

    function showAlert(message, type) {
        const alertPlaceholder = document.createElement('div');
        alertPlaceholder.innerHTML = `
            <div class="alert alert-${type} alert-dismissible fade show" role="alert">
                ${message}
                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
            </div>
        `;
        document.body.appendChild(alertPlaceholder);
        setTimeout(() => {
            alertPlaceholder.remove();
        }, 3000);
    }

    // Opcional: Abrir la modal automáticamente si hay errores en el formulario
    {% if tag_form.errors %}
        var agregarEtiquetaModal = new bootstrap.Modal(document.getElementById('agregarEtiquetaModal'));
        agregarEtiquetaModal.show();
    {% endif %}
</script>
{% endblock %}

----- Fin de templates/profile.html -----

----- Inicio de templates/register.html -----
<!-- templates/register.html -->

{% extends 'base.html' %}

{% block title %}Registrar - PulztagWeb{% endblock %}

{% block content %}
<div class="row justify-content-center">
    <div class="col-md-6">
        <h2 class="text-center">Crear Cuenta</h2>
        <form method="POST" action="{{ url_for('register') }}">
            {{ form.hidden_tag() }}
            <div class="mb-3">
                {{ form.username.label(class="form-label") }}
                {{ form.username(class="form-control") }}
                {% for error in form.username.errors %}
                    <div class="text-danger">{{ error }}</div>
                {% endfor %}
            </div>
            <div class="mb-3">
                {{ form.email.label(class="form-label") }}
                {{ form.email(class="form-control") }}
                {% for error in form.email.errors %}
                    <div class="text-danger">{{ error }}</div>
                {% endfor %}
            </div>
            <div class="mb-3">
                {{ form.password.label(class="form-label") }}
                {{ form.password(class="form-control") }}
                {% for error in form.password.errors %}
                    <div class="text-danger">{{ error }}</div>
                {% endfor %}
            </div>
            <div class="mb-3">
                {{ form.confirm_password.label(class="form-label") }}
                {{ form.confirm_password(class="form-control") }}
                {% for error in form.confirm_password.errors %}
                    <div class="text-danger">{{ error }}</div>
                {% endfor %}
            </div>
            <button type="submit" class="btn btn-primary">{{ form.submit.label.text }}</button>
        </form>
    </div>
</div>
{% endblock %}

----- Fin de templates/register.html -----

----- Inicio de templates/reset_request.html -----
<!-- templates/reset_request.html -->

{% extends 'base.html' %}

{% block title %}Recuperar Contraseña - PulztagWeb{% endblock %}

{% block content %}
<h2 class="text-center mb-4">Recuperar Contraseña</h2>
<div class="row justify-content-center">
    <div class="col-md-6">
        <form method="POST" action="{{ url_for('reset_request') }}">
            {{ form.hidden_tag() }}
            <div class="mb-3">
                {{ form.email.label(class="form-label") }}
                {{ form.email(class="form-control", placeholder="Correo Electrónico") }}
                {% for error in form.email.errors %}
                    <div class="text-danger">{{ error }}</div>
                {% endfor %}
            </div>
            <button type="submit" class="btn btn-primary">{{ form.submit.label.text }}</button>
        </form>
        <p class="mt-3">¿Recuerdas tu contraseña? <a href="{{ url_for('login') }}">Inicia Sesión</a></p>
    </div>
</div>
{% endblock %}

----- Fin de templates/reset_request.html -----

----- Inicio de templates/reset_token.html -----
<!-- templates/reset_token.html -->

{% extends 'base.html' %}

{% block title %}Restablecer Contraseña - PulztagWeb{% endblock %}

{% block content %}
<h2 class="text-center mb-4">Restablecer Contraseña</h2>
<div class="row justify-content-center">
    <div class="col-md-6">
        <form method="POST" action="{{ url_for('reset_token', token=token) }}">
            {{ form.hidden_tag() }}
            <div class="mb-3">
                {{ form.password.label(class="form-label") }}
                {{ form.password(class="form-control", placeholder="Nueva Contraseña") }}
                {% for error in form.password.errors %}
                    <div class="text-danger">{{ error }}</div>
                {% endfor %}
            </div>
            <div class="mb-3">
                {{ form.confirm_password.label(class="form-label") }}
                {{ form.confirm_password(class="form-control", placeholder="Confirmar Nueva Contraseña") }}
                {% for error in form.confirm_password.errors %}
                    <div class="text-danger">{{ error }}</div>
                {% endfor %}
            </div>
            <button type="submit" class="btn btn-primary">{{ form.submit.label.text }}</button>
        </form>
    </div>
</div>
{% endblock %}

----- Fin de templates/reset_token.html -----

----- Inicio de templates/tags.html -----
{% extends 'base.html' %}

{% block title %}Tags - PulztagWeb{% endblock %}

{% block content %}
<h2 class="text-center">Tags</h2>
<p>Esta sección está vacía por el momento.</p>
{% endblock %}

----- Fin de templates/tags.html -----

----- Inicio de .gitignore -----
# Entorno virtual
virtualenv/

# Archivos de Python
__pycache__/
*.pyc
*.pyo
*.pyd

# Archivos de bases de datos
*.sqlite3
*.db

# Directorios de subida
uploads/
vcards/

# Archivos de configuración local
*.env

# Archivos de respaldo
respaldo.txt
site_backup.db

# Archivos de logs
*.log

# Otros archivos sin seguimiento
*.txt

# Archivos específicos a ignorar
concatenar_archivos.py

# Archivos generados por el sistema operativo
.DS_Store
Thumbs.db
ehthumbs.db
Desktop.ini

# Directorios de entornos de desarrollo
.vscode/
.idea/

# Archivos de base de datos específicos
instance/site_new.db

# Archivos de configuración específicos
script_crear_admin.py

----- Fin de .gitignore -----

----- Inicio de app.py -----
# app.py

import os
import uuid
from urllib.parse import urlparse
from flask import Flask, render_template, request, flash, redirect, url_for, send_from_directory, abort
from flask_bcrypt import Bcrypt
from flask_mail import Mail, Message
from random import randint
from flask_wtf.csrf import CSRFProtect
from dotenv import load_dotenv
import pandas as pd
from werkzeug.utils import secure_filename
from werkzeug.security import generate_password_hash
from itsdangerous import URLSafeTimedSerializer, SignatureExpired
from extensions import mail, db, migrate, bcrypt, login_manager, oauth
from flask_admin import Admin
from flask_admin.contrib.sqla import ModelView
from models import db, User, Pulzcard, Tag, SecureModelView
from forms import (
    RegistrationForm, LoginForm, UpdateAccountForm,
    RequestResetForm, ResetPasswordForm,
    PulzcardForm, EditPulzcardForm, DeletePulzcardForm,
    ContactForm, OrderForm, TagForm, EditTagForm, DeleteTagForm, VerificationForm  # Importa el nuevo formulario de contacto
)
from flask_login import login_required, current_user, login_user, logout_user
from datetime import datetime

load_dotenv()

app = Flask(__name__, instance_relative_config=True)
bcrypt = Bcrypt(app)  # Inicializa bcrypt en la app de Flask
app.secret_key = os.getenv('SECRET_KEY', 'test_secret_key')

# Configuración de la Base de Datos
db_path = os.path.join(app.instance_path, 'site_new.db')
app.config['SQLALCHEMY_DATABASE_URI'] = f'sqlite:///{db_path}'
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False

db.init_app(app)
migrate.init_app(app, db)
bcrypt.init_app(app)
login_manager.init_app(app)
oauth.init_app(app)  # Inicializar `oauth` con la instancia de `app`
mail.init_app(app)

# Registrar el cliente de Google OAuth
google = oauth.register(
    name='google',
    client_id=os.getenv('GOOGLE_CLIENT_ID'),
    client_secret=os.getenv('GOOGLE_CLIENT_SECRET'),
    access_token_url='https://accounts.google.com/o/oauth2/token',
    authorize_url='https://accounts.google.com/o/oauth2/auth',
    api_base_url='https://www.googleapis.com/oauth2/v1/',
    userinfo_endpoint='https://www.googleapis.com/oauth2/v1/userinfo',  # Cambiado para mayor claridad
    client_kwargs={'scope': 'openid email profile'},
)

# Inicializar Flask-Admin
admin = Admin(app, name='Panel de Administración', template_mode='bootstrap4')

# Agregar vistas con la clase SecureModelView al panel de administración
admin.add_view(SecureModelView(User, db.session))
admin.add_view(SecureModelView(Pulzcard, db.session))
admin.add_view(SecureModelView(Tag, db.session))

# Configuración de Flask-Mail
app.config['MAIL_SERVER'] = 'smtp.gmail.com'
app.config['MAIL_PORT'] = 587
app.config['MAIL_USE_TLS'] = True
app.config['MAIL_USERNAME'] = os.getenv('MAIL_USERNAME')
app.config['MAIL_PASSWORD'] = os.getenv('MAIL_PASSWORD')
app.config['MAIL_DEFAULT_SENDER'] = os.getenv('MAIL_USERNAME')

mail = Mail(app)

# Inicializar CSRFProtect
csrf = CSRFProtect(app)

# Configuración de Flask-Login
login_manager.login_view = 'login'
login_manager.login_message_category = 'warning'

def send_verification_email(user):
    verification_code = str(randint(100000, 999999))  # Genera un código de 6 dígitos
    user.verification_code = verification_code
    db.session.commit()

    msg = Message('Código de verificación', recipients=[user.email])
    msg.body = f'Tu código de verificación es: {verification_code}'
    mail.send(msg)

@login_manager.user_loader
def load_user(user_id):
    return User.query.get(int(user_id))

# Directorio para guardar las vCards
VCARD_FOLDER = os.path.join(app.instance_path, 'vcards')
os.makedirs(VCARD_FOLDER, exist_ok=True)

# Directorio para guardar las subidas
UPLOAD_FOLDER = os.path.join(app.instance_path, 'uploads')
os.makedirs(UPLOAD_FOLDER, exist_ok=True)
app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER

# Extensiones permitidas (si las usas)
ALLOWED_LOGO_EXTENSIONS = {'png', 'jpeg', 'jpg'}
ALLOWED_EXCEL_EXTENSIONS = {'xlsx', 'xls'}

def allowed_file(filename, allowed_extensions):
    return '.' in filename and \
           filename.rsplit('.', 1)[1].lower() in allowed_extensions

# Configurar el serializador
s = URLSafeTimedSerializer(app.secret_key)

@app.route('/verify', methods=['GET', 'POST'])
def verify():
    form = VerificationForm()
    if form.validate_on_submit():
        user = User.query.filter_by(email=form.email.data).first()
        if user and user.verification_code == form.code.data:
            user.is_verified = True
            user.verification_code = None  # Limpia el código
            db.session.commit()
            flash('Cuenta verificada exitosamente.', 'success')
            return redirect(url_for('login'))
        else:
            flash('Código de verificación incorrecto.', 'danger')
    return render_template('verify.html', form=form)

@app.route('/login/google')
def google_login():
    redirect_uri = url_for('google_authorize', _external=True)
    return oauth.google.authorize_redirect(redirect_uri)

@app.route('/authorize/google')
def google_authorize():
    token = oauth.google.authorize_access_token()
    user_info = oauth.google.get('userinfo').json()

    user = User.query.filter_by(email=user_info['email']).first()
    if not user:
        user = User(
            username=user_info['name'],
            email=user_info['email'],
            is_verified=True  # Marcar automáticamente como verificado
        )
        db.session.add(user)
        db.session.commit()

    login_user(user)
    flash('Inicio de sesión exitoso con Google.', 'success')
    return redirect(url_for('home'))

# Rutas de Autenticación
@app.route('/register', methods=['GET', 'POST'])
def register():
    if current_user.is_authenticated:
        flash('Ya estás logueado.', 'info')
        return redirect(url_for('home'))
    form = RegistrationForm()
    if form.validate_on_submit():
        # Generar una contraseña aleatoria
        random_password = str(uuid.uuid4())[:8]  # Genera una contraseña aleatoria de 8 caracteres
        hashed_password = bcrypt.generate_password_hash(random_password).decode('utf-8')

        # Crear el usuario con is_admin=False
        user = User(username=form.username.data, email=form.email.data, password=hashed_password, is_admin=False)
        db.session.add(user)
        db.session.commit()

        # Enviar el correo con la contraseña generada
        try:
            msg = Message(
                'Tu nueva cuenta en PulztagWeb',
                recipients=[user.email]
            )
            msg.body = f'''Hola {user.username},

Tu cuenta ha sido creada exitosamente. Aquí tienes tu contraseña temporal:

Contraseña: {random_password}

Por favor, inicia sesión y cámbiala en tu perfil lo antes posible.

Gracias por unirte a PulztagWeb.
'''
            mail.send(msg)
            flash('Tu cuenta ha sido creada. Se ha enviado un correo con tu contraseña temporal.', 'success')
        except Exception as e:
            print(f"Error al enviar el correo: {e}")
            flash('Hubo un error al enviar el correo. Por favor, contacta al soporte.', 'danger')

        return redirect(url_for('login'))
    return render_template('register.html', title='Registrar', form=form)

@app.route('/login', methods=['GET', 'POST'])
def login():
    if current_user.is_authenticated:
        flash('Ya estás logueado.', 'info')
        return redirect(url_for('home'))
    form = LoginForm()
    if form.validate_on_submit():
        user = User.query.filter_by(email=form.email.data).first()
        if user and bcrypt.check_password_hash(user.password, form.password.data):
            login_user(user, remember=form.remember.data)
            flash('Has iniciado sesión correctamente.', 'success')
            return redirect(url_for('home'))  # Redirige siempre a 'home'
        else:
            flash('Inicio de sesión fallido. Revisa el correo y la contraseña.', 'danger')
    return render_template('login.html', title='Iniciar Sesión', form=form)

@app.route('/logout')
def logout():
    logout_user()
    flash('Has cerrado sesión.', 'info')
    return redirect(url_for('home'))

@app.route('/account', methods=['GET', 'POST'])
@login_required
def account():
    form = UpdateAccountForm()
    if form.validate_on_submit():
        current_user.username = form.username.data
        current_user.email = form.email.data
        if form.password.data:
            hashed_password = bcrypt.generate_password_hash(form.password.data).decode('utf-8')
            current_user.password = hashed_password
        db.session.commit()
        flash('Tu cuenta ha sido actualizada.', 'success')
        return redirect(url_for('account'))
    elif request.method == 'GET':
        form.username.data = current_user.username
        form.email.data = current_user.email
    return render_template('account.html', title='Perfil de Usuario', form=form)

@app.route('/reset_password', methods=['GET', 'POST'])
def reset_request():
    if current_user.is_authenticated:
        flash('Ya estás logueado.', 'info')
        return redirect(url_for('home'))
    form = RequestResetForm()
    if form.validate_on_submit():
        user = User.query.filter_by(email=form.email.data).first()
        if user:
            token = user.get_reset_token()
            msg = Message('Recupera tu Contraseña', recipients=[user.email])
            reset_url = url_for('reset_token', token=token, _external=True)
            msg.body = f'''Para restablecer tu contraseña, visita el siguiente enlace:
{reset_url}

Si no solicitaste un restablecimiento de contraseña, por favor ignora este mensaje.
'''
            mail.send(msg)
            flash('Se ha enviado un correo para restablecer tu contraseña.', 'info')
            return redirect(url_for('login'))
    return render_template('reset_request.html', title='Recuperar Contraseña', form=form)

@app.route('/reset_password/<token>', methods=['GET', 'POST'])
def reset_token(token):
    if current_user.is_authenticated:
        flash('Ya estás logueado.', 'info')
        return redirect(url_for('home'))
    user = User.verify_reset_token(token)
    if not user:
        flash('El token es inválido o ha expirado.', 'warning')
        return redirect(url_for('reset_request'))
    form = ResetPasswordForm()
    if form.validate_on_submit():
        hashed_password = bcrypt.generate_password_hash(form.password.data).decode('utf-8')
        user.password = hashed_password
        db.session.commit()
        flash('Tu contraseña ha sido actualizada. Ahora puedes iniciar sesión.', 'success')
        return redirect(url_for('login'))
    return render_template('reset_token.html', title='Restablecer Contraseña', form=form)

# Rutas Existentes
@app.route('/')
def home():
    return render_template('index.html')

@app.route('/about')
def about():
    return render_template('about.html')

@app.route('/contact', methods=['GET', 'POST'])
def contact():
    form = ContactForm()  # Crear una instancia del formulario
    if form.validate_on_submit():  # Usar validate_on_submit para verificar el envío
        nombre = form.nombre.data
        email = form.email.data
        mensaje = form.mensaje.data

        try:
            msg = Message(
                subject=f"Nuevo mensaje de {nombre}",
                recipients=['contacto@pulztag.com'],
                body=f"Nombre: {nombre}\nCorreo Electrónico: {email}\n\nMensaje:\n{mensaje}"
            )
            mail.send(msg)
            flash('¡Tu mensaje ha sido enviado exitosamente!', 'success')
            return redirect(url_for('contact'))
        except Exception as e:
            print(e)
            flash('Hubo un error al enviar tu mensaje. Por favor, inténtalo de nuevo más tarde.', 'danger')
            return redirect(url_for('contact'))

    return render_template('contact.html', form=form)  # Pasar el formulario al template

@app.route('/products')
def products():
    return render_template('products.html')

@app.route('/services')
def services():
    return render_template('services.html')

@app.route('/order', methods=['GET', 'POST'])
@login_required
def order():
    form = OrderForm()  # Crear una instancia del formulario
    if form.validate_on_submit():
        # Procesa el pedido
        nombre = form.nombre.data
        email = form.email.data
        dispositivo = form.dispositivo.data
        mensaje = form.mensaje.data

        # Validaciones básicas
        if not nombre or not email or not dispositivo or not mensaje:
            flash('Por favor, completa todos los campos.', 'danger')
            return redirect(url_for('order'))

        # Manejar los logos
        logos = request.files.getlist('logos')
        valid_logos = [logo for logo in logos if logo.filename != '']
        if len(valid_logos) > 10:
            flash('Puedes subir un máximo de 10 logos.', 'danger')
            return redirect(url_for('order'))

        saved_logos = []
        for logo in valid_logos:
            filename = logo.filename.strip()
            if allowed_file(filename, ALLOWED_LOGO_EXTENSIONS):
                try:
                    secure_name = secure_filename(filename)
                    unique_filename = f"{uuid.uuid4().hex}_{secure_name}"
                    logo_path = os.path.join(app.config['UPLOAD_FOLDER'], unique_filename)
                    logo.save(logo_path)
                    saved_logos.append((filename, logo_path))
                    print(f"Logo guardado: {logo_path}")
                except Exception as e:
                    print(f"Error al guardar el logo {filename}: {e}")
                    flash(f"Hubo un error al guardar el logo {filename}.", 'danger')
                    return redirect(url_for('order'))
            else:
                flash(f"Formato de logo no permitido: {filename}", 'danger')
                return redirect(url_for('order'))

        # Manejar el archivo Excel
        excel = request.files.get('excel')
        if excel and excel.filename != '':
            filename = excel.filename.strip()
            if allowed_file(filename, ALLOWED_EXCEL_EXTENSIONS):
                try:
                    secure_name = secure_filename(filename)
                    unique_filename = f"{uuid.uuid4().hex}_{secure_name}"
                    excel_path = os.path.join(app.config['UPLOAD_FOLDER'], unique_filename)
                    excel.save(excel_path)
                    print(f"Archivo Excel guardado: {excel_path}")
                except Exception as e:
                    print(f"Error al guardar el archivo Excel {filename}: {e}")
                    flash(f"Hubo un error al guardar el archivo Excel {filename}.", 'danger')
                    return redirect(url_for('order'))
            else:
                flash('Formato de archivo Excel no permitido.', 'danger')
                return redirect(url_for('order'))
        else:
            excel_path = None

        # Crear un DataFrame con los datos del pedido
        data = {
            'Nombre': [nombre],
            'Correo Electrónico': [email],
            'Selección de Dispositivo': [dispositivo],
            'Mensaje': [mensaje]
        }
        df = pd.DataFrame(data)

        # Guardar el DataFrame en un archivo Excel
        pedido_excel_path = os.path.join(app.config['UPLOAD_FOLDER'], f"pedido_{uuid.uuid4().hex}.xlsx")
        df.to_excel(pedido_excel_path, index=False)
        print(f"Pedido guardado en: {pedido_excel_path}")

        # Enviar el correo con los archivos adjuntos
        try:
            msg = Message(
                subject="Nuevo Pedido de PulztagWeb",
                recipients=['contacto@pulztag.com']
            )
            msg.body = f"Nombre: {nombre}\nCorreo Electrónico: {email}\nSelección de Dispositivo: {dispositivo}\n\nMensaje:\n{mensaje}"

            # Adjuntar el archivo Excel del pedido
            with open(pedido_excel_path, 'rb') as fp:
                msg.attach(
                    "pedido.xlsx",
                    "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                    fp.read()
                )

            # Adjuntar los logos
            for original_filename, logo_path in saved_logos:
                try:
                    print(f"Adjuntando logo: {original_filename} desde {logo_path}")
                    with open(logo_path, 'rb') as fp:
                        # Determinar el MIME type correcto
                        ext = original_filename.rsplit('.', 1)[1].lower()
                        mime_type = f"image/{'jpeg' if ext in ['jpg', 'jpeg'] else ext}"
                        msg.attach(
                            original_filename,
                            mime_type,
                            fp.read()
                        )
                except Exception as e:
                    print(f"Error adjuntando el logo {original_filename}: {e}")

            # Adjuntar el archivo Excel si existe
            if excel_path:
                with open(excel_path, 'rb') as fp:
                    msg.attach(
                        os.path.basename(excel_path),
                        "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                        fp.read()
                    )

            mail.send(msg)
            print("Correo enviado exitosamente.")

            # Eliminar archivos temporales
            os.remove(pedido_excel_path)
            for _, logo_path in saved_logos:
                os.remove(logo_path)
            if excel_path:
                os.remove(excel_path)
            print("Archivos temporales eliminados.")

            flash('Su solicitud fue enviada exitosamente. ¡Pronto nos pondremos en contacto contigo!', 'success')
            return redirect(url_for('order'))

        except Exception as e:
            print(f"Error al enviar el correo: {e}")
            flash('Hubo un error al procesar tu solicitud. Por favor, inténtalo de nuevo más tarde.', 'danger')
            return redirect(url_for('order'))

    return render_template('order.html', form=form)  # Pasar el formulario al template

@app.route('/create_item')
@login_required
def create_item():
    return render_template('create_item.html')

# Rutas de Pulzcard
@app.route('/pulzcard', methods=['GET', 'POST'])
@login_required
def pulzcard():
    form = PulzcardForm()
    if form.validate_on_submit():
        # Handle the image file if provided
        if form.image_file.data:
            # Save the uploaded image file
            image_file = form.image_file.data
            filename = secure_filename(image_file.filename)
            unique_filename = f"{uuid.uuid4().hex}_{filename}"
            image_path = os.path.join(app.config['UPLOAD_FOLDER'], unique_filename)
            image_file.save(image_path)
            print(f"Image saved at: {image_path}")
        else:
            unique_filename = 'default.jpg'

        # Crear Pulzcard y agregar a la base de datos
        pulzcard = Pulzcard(
            card_name=form.card_name.data,
            first_name=form.first_name.data,
            last_name=form.last_name.data,
            organization=form.organization.data,
            position=form.position.data,
            phone=form.phone.data,
            email=form.email.data,
            website=form.website.data,
            address=form.address.data,
            image_file=unique_filename,  # Store the image filename in the database
            owner=current_user
        )

        # Añadir a la sesión y hacer flush para obtener card_id
        db.session.add(pulzcard)
        try:
            db.session.flush()  # Asigna card_id sin commit
            print(f"Pulzcard creada con card_id: {pulzcard.card_id}")
        except Exception as e:
            db.session.rollback()
            print(f"Error al hacer flush de Pulzcard: {e}")
            flash('Hubo un error al crear tu Pulzcard. Por favor, inténtalo de nuevo.', 'danger')
            return redirect(url_for('pulzcard'))

        # Crear y guardar la vCard
        vcard = f"""BEGIN:VCARD
VERSION:3.0
FN:{pulzcard.first_name} {pulzcard.last_name}
ORG:{pulzcard.organization}
TITLE:{pulzcard.position}
TEL;TYPE=WORK,VOICE:{pulzcard.phone}
EMAIL:{pulzcard.email}
URL:{pulzcard.website}
ADR;TYPE=WORK:;;{pulzcard.address}
END:VCARD"""
        vcard_path = os.path.join(VCARD_FOLDER, f'{pulzcard.card_id}.vcf')
        print(f"Intentando guardar vCard en: {vcard_path}")

        try:
            with open(vcard_path, 'w') as f:
                f.write(vcard)
            print(f"vCard guardada exitosamente en: {vcard_path}")
        except Exception as e:
            db.session.rollback()
            print(f"Error al guardar la vCard: {e}")
            flash('Hubo un error al guardar la Pulzcard.', 'danger')
            return redirect(url_for('pulzcard'))

        # Commit de la Pulzcard y finalización
        try:
            db.session.commit()
            print("Pulzcard añadida a la base de datos correctamente.")
        except Exception as e:
            db.session.rollback()
            print(f"Error al crear Pulzcard en la base de datos: {e}")
            flash('Hubo un error al crear tu Pulzcard. Por favor, inténtalo de nuevo.', 'danger')
            return redirect(url_for('pulzcard'))

        # Redirigir usando card_id en lugar de id
        return redirect(url_for('pulzcard_card', card_id=pulzcard.card_id))
    else:
        print("Formulario no validado. Errores:", form.errors)
    
    return render_template('pulzcard/index.html', form=form)
@app.route('/pulzcard/card/<card_id>')
def pulzcard_card(card_id):
    # Query the Pulzcard from the database using only card_id
    pulzcard = Pulzcard.query.filter_by(card_id=card_id).first()
    if not pulzcard:
        flash('Tarjeta no encontrada.', 'danger')
        return redirect(url_for('home'))
    
    # Path to the vCard file
    vcard_path = os.path.join(VCARD_FOLDER, f'{card_id}.vcf')
    print(f"Intentando leer vCard en: {vcard_path}")
    
    # Check if vCard file exists
    if not os.path.exists(vcard_path):
        print(f"vCard no encontrada en: {vcard_path}")
        flash('Tarjeta no encontrada.', 'danger')
        return redirect(url_for('home'))

    # Read the vCard content
    with open(vcard_path, 'r') as f:
        vcard = f.read()

    # Extract contact information from the vCard
    contact_info = {
        "full_name": f"{pulzcard.first_name} {pulzcard.last_name}",
        "organization": pulzcard.organization,
        "position": pulzcard.position,
        "phone": pulzcard.phone,
        "email": pulzcard.email,
        "website": pulzcard.website,
        "address": pulzcard.address,
        "image_file": pulzcard.image_file  # Add the image file from the database
    }

    # Print extracted contact information for debugging
    print(f"Información de contacto extraída: {contact_info}")
    
    # Render the template with the complete contact information
    return render_template('pulzcard/card.html', contact=contact_info, card_id=card_id)

@app.route('/uploads/<filename>')
def uploaded_file(filename):
    return send_from_directory(app.config['UPLOAD_FOLDER'], filename)

@app.route('/pulzcard/vcards/<filename>')
def pulzcard_download_vcard(filename):
    # Opcional: Validar que el archivo existe y pertenece a una Pulzcard existente
    file_path = os.path.join(VCARD_FOLDER, filename)
    if not os.path.exists(file_path):
        flash('Archivo no encontrado.', 'danger')
        return redirect(url_for('home'))
    return send_from_directory(VCARD_FOLDER, filename, as_attachment=True)

# Nueva Ruta: Perfil de Usuario
@app.route('/profile', methods=['GET', 'POST'])
@login_required
def profile():
    pulzcards = Pulzcard.query.filter_by(user_id=current_user.id).order_by(Pulzcard.created_at.desc()).all()
    tags = Tag.query.filter_by(user_id=current_user.id).order_by(Tag.created_at.desc()).all()
    tag_form = TagForm()

    # Initialize delete forms for each Pulzcard and Tag
    delete_forms = {card.id: DeletePulzcardForm(prefix=str(card.card_id)) for card in pulzcards}
    delete_tag_forms = {tag.id: DeleteTagForm(prefix=str(tag.tag_id)) for tag in tags}

    if tag_form.validate_on_submit():
        new_tag = Tag(
            tag_name=tag_form.tag_name.data,
            redirect_url=tag_form.redirect_url.data,
            user_id=current_user.id
        )
        db.session.add(new_tag)
        db.session.commit()
        flash('Tu etiqueta ha sido creada exitosamente.', 'success')
        return redirect(url_for('profile'))

    return render_template(
        'profile.html', 
        title='Perfil de Usuario', 
        pulzcards=pulzcards, 
        tags=tags, 
        tag_form=tag_form, 
        delete_forms=delete_forms,  # Pulzcard delete forms
        delete_tag_forms=delete_tag_forms  # Tag delete forms
    )

@app.route('/r/<tag_id>')
def redirect_tag(tag_id):
    # Busca la etiqueta usando tag_id en lugar de id
    tag = Tag.query.filter_by(tag_id=tag_id).first()
    if tag:
        return redirect(tag.redirect_url)
    else:
        flash('La etiqueta no existe o fue eliminada.', 'danger')
        return redirect(url_for('profile'))

@app.route('/tag/delete/<tag_id>', methods=['POST'])
@login_required
def delete_tag(tag_id):
    tag = Tag.query.filter_by(tag_id=tag_id, user_id=current_user.id).first_or_404()

    form = DeleteTagForm()
    if form.validate_on_submit():
        try:
            db.session.delete(tag)
            db.session.commit()
            flash('Etiqueta eliminada exitosamente.', 'success')
        except Exception as e:
            print(f"Error al eliminar etiqueta: {e}")
            flash('Hubo un error al eliminar la etiqueta. Por favor, intenta de nuevo.', 'danger')
    else:
        flash('Formulario inválido o token CSRF no válido.', 'danger')

    return redirect(url_for('profile'))

# Nueva Ruta: Editar Pulzcard
@app.route('/pulzcard/edit/<card_id>', methods=['GET', 'POST'])
@login_required
def edit_pulzcard(card_id):
    pulzcard = Pulzcard.query.filter_by(card_id=card_id, user_id=current_user.id).first_or_404()
    form = EditPulzcardForm()

    if form.validate_on_submit():
        pulzcard.card_name = form.card_name.data
        pulzcard.first_name = form.first_name.data
        pulzcard.last_name = form.last_name.data
        pulzcard.organization = form.organization.data
        pulzcard.position = form.position.data
        pulzcard.phone = form.phone.data
        pulzcard.email = form.email.data
        pulzcard.website = form.website.data
        pulzcard.address = form.address.data

        # Procesar la imagen de perfil si se ha subido una nueva
        if form.image_file.data:
            # Guardar la nueva imagen
            image_file = form.image_file.data
            filename = secure_filename(image_file.filename)
            unique_filename = f"{uuid.uuid4().hex}_{filename}"
            image_path = os.path.join(app.config['UPLOAD_FOLDER'], unique_filename)
            image_file.save(image_path)
            
            # Actualizar el campo image_file en la base de datos
            pulzcard.image_file = unique_filename

        db.session.commit()

        # Actualizar la vCard en el sistema de archivos
        vcard = f"""BEGIN:VCARD
VERSION:3.0
FN:{pulzcard.first_name} {pulzcard.last_name}
ORG:{pulzcard.organization}
TITLE:{pulzcard.position}
TEL;TYPE=WORK,VOICE:{pulzcard.phone}
EMAIL:{pulzcard.email}
URL:{pulzcard.website}
ADR;TYPE=WORK:;;{pulzcard.address}
END:VCARD"""
        vcard_path = os.path.join(VCARD_FOLDER, f'{pulzcard.card_id}.vcf')
        with open(vcard_path, 'w') as f:
            f.write(vcard)

        flash('Pulzcard actualizada exitosamente.', 'success')
        return redirect(url_for('profile'))
    elif request.method == 'GET':
        form.card_name.data = pulzcard.card_name
        form.first_name.data = pulzcard.first_name
        form.last_name.data = pulzcard.last_name
        form.organization.data = pulzcard.organization
        form.position.data = pulzcard.position
        form.phone.data = pulzcard.phone
        form.email.data = pulzcard.email
        form.website.data = pulzcard.website
        form.address.data = pulzcard.address

    return render_template('edit_pulzcard.html', title='Editar Pulzcard', form=form, pulzcard=pulzcard)

# Nueva Ruta: Eliminar Pulzcard
@app.route('/pulzcard/delete/<card_id>', methods=['POST'])
@login_required
def delete_pulzcard(card_id):
    pulzcard = Pulzcard.query.filter_by(card_id=card_id, user_id=current_user.id).first_or_404()

    form = DeletePulzcardForm()
    if form.validate_on_submit():
        try:
            # Eliminar la vCard del sistema de archivos
            vcard_path = os.path.join(VCARD_FOLDER, f'{pulzcard.card_id}.vcf')
            if os.path.exists(vcard_path):
                os.remove(vcard_path)

            # Eliminar la Pulzcard de la base de datos
            db.session.delete(pulzcard)
            db.session.commit()
            flash('Pulzcard eliminada exitosamente.', 'success')
        except Exception as e:
            print(f"Error al eliminar Pulzcard: {e}")
            flash('Hubo un error al eliminar la Pulzcard. Por favor, intenta de nuevo.', 'danger')
    else:
        flash('Formulario inválido o token CSRF no válido.', 'danger')

    return redirect(url_for('profile'))

@app.route('/create_tag', methods=['GET', 'POST'])
@login_required
def create_tag():
    form = TagForm()
    if form.validate_on_submit():
        new_tag = Tag(
            tag_name=form.tag_name.data,
            redirect_url=form.redirect_url.data,
            user_id=current_user.id
        )
        db.session.add(new_tag)
        db.session.commit()
        flash('Tu etiqueta ha sido creada exitosamente.', 'success')
        return redirect(url_for('profile'))
    return render_template('create_tag.html', title='Crear Etiqueta', form=form)

@app.route('/tag/edit/<tag_id>', methods=['GET', 'POST'])
@login_required
def edit_tag(tag_id):
    tag = Tag.query.filter_by(tag_id=tag_id, user_id=current_user.id).first_or_404()
    form = EditTagForm()

    if form.validate_on_submit():
        tag.tag_name = form.tag_name.data
        tag.redirect_url = form.redirect_url.data
        db.session.commit()
        flash('Etiqueta actualizada exitosamente.', 'success')
        return redirect(url_for('profile'))
    elif request.method == 'GET':
        form.tag_name.data = tag.tag_name
        form.redirect_url.data = tag.redirect_url

    return render_template('edit_tag.html', title='Editar Etiqueta', form=form, tag=tag)

# Ruta de Prueba para Crear una vCard Manualmente
@app.route('/test_vcard')
def test_vcard():
    test_vcard_content = """BEGIN:VCARD
VERSION:3.0
FN:Prueba Nombre
ORG:Prueba Organización
TITLE:Prueba Cargo
TEL;TYPE=WORK,VOICE:123456789
EMAIL:prueba@example.com
URL:https://www.prueba.com
ADR;TYPE=WORK:;;Calle Falsa 123
END:VCARD"""

    test_vcard_path = os.path.join(VCARD_FOLDER, 'test.vcf')
    try:
        with open(test_vcard_path, 'w') as f:
            f.write(test_vcard_content)
        return "Archivo de prueba vCard creado exitosamente."
    except Exception as e:
        return f"Error al crear el archivo de prueba vCard: {e}"

# Crear las tablas de la base de datos
with app.app_context():
    db.create_all()  # Asegura que la base de datos y las tablas se creen

if __name__ == '__main__':
    app.run(debug=True)

----- Fin de app.py -----

----- Inicio de extensions.py -----
# extensions.py

from flask_sqlalchemy import SQLAlchemy
from flask_migrate import Migrate
from flask_bcrypt import Bcrypt
from flask_login import LoginManager
from flask_mail import Mail
from authlib.integrations.flask_client import OAuth

db = SQLAlchemy()
migrate = Migrate()
bcrypt = Bcrypt()
login_manager = LoginManager()
mail = Mail()  # Inicializa mail
oauth = OAuth()

----- Fin de extensions.py -----

----- Inicio de forms.py -----
from flask_wtf import FlaskForm
from flask_wtf.file import FileField, FileAllowed
from wtforms import StringField, PasswordField, SubmitField, BooleanField, TextAreaField, EmailField, URLField
from wtforms.validators import DataRequired, Length, Email, EqualTo, URL, ValidationError, Optional
from models import User
from flask_login import current_user


class VerificationForm(FlaskForm):
    email = StringField('Correo Electrónico', validators=[DataRequired(), Email()])
    code = StringField('Código de Verificación', validators=[DataRequired(), Length(6, 6)])
    submit = SubmitField('Verificar')

class RegistrationForm(FlaskForm):
    username = StringField('Nombre de Usuario', validators=[DataRequired(), Length(min=2, max=20)])
    email = StringField('Correo Electrónico', validators=[DataRequired(), Email()])
    password = PasswordField('Contraseña', validators=[DataRequired(), Length(min=6)])
    confirm_password = PasswordField('Confirmar Contraseña', validators=[DataRequired(), EqualTo('password')])
    submit = SubmitField('Crear Cuenta')

    def validate_username(self, username):
        user = User.query.filter_by(username=username.data).first()
        if user:
            raise ValidationError('Este nombre de usuario ya está en uso. Por favor, elige otro.')

    def validate_email(self, email):
        user = User.query.filter_by(email=email.data).first()
        if user:
            raise ValidationError('Este correo electrónico ya está registrado. Por favor, inicia sesión o usa otro correo.')

class LoginForm(FlaskForm):
    email = StringField('Correo Electrónico', validators=[DataRequired(), Email()])
    password = PasswordField('Contraseña', validators=[DataRequired()])
    remember = BooleanField('Recordarme')
    submit = SubmitField('Iniciar Sesión')

class UpdateAccountForm(FlaskForm):
    username = StringField('Nombre de Usuario', validators=[DataRequired(), Length(min=2, max=20)])
    email = StringField('Correo Electrónico', validators=[DataRequired(), Email()])
    password = PasswordField('Nueva Contraseña', validators=[Length(min=6)])
    confirm_password = PasswordField('Confirmar Nueva Contraseña', validators=[EqualTo('password')])
    submit = SubmitField('Actualizar Perfil')

    def validate_username(self, username):
        if username.data != current_user.username:
            user = User.query.filter_by(username=username.data).first()
            if user:
                raise ValidationError('Este nombre de usuario ya está en uso. Por favor, elige otro.')

    def validate_email(self, email):
        if email.data != current_user.email:
            user = User.query.filter_by(email=email.data).first()
            if user:
                raise ValidationError('Este correo electrónico ya está registrado. Por favor, usa otro correo.')

class RequestResetForm(FlaskForm):
    email = StringField('Correo Electrónico', validators=[DataRequired(), Email()])
    submit = SubmitField('Solicitar Restablecimiento de Contraseña')

    def validate_email(self, email):
        user = User.query.filter_by(email=email.data).first()
        if user is None:
            raise ValidationError('No hay una cuenta asociada a este correo electrónico.')

class ResetPasswordForm(FlaskForm):
    password = PasswordField('Contraseña', validators=[DataRequired(), Length(min=6)])
    confirm_password = PasswordField('Confirmar Contraseña', validators=[DataRequired(), EqualTo('password')])
    submit = SubmitField('Restablecer Contraseña')

class PulzcardForm(FlaskForm):
    card_name = StringField('Nombre de Tarjeta', validators=[DataRequired()])
    first_name = StringField('Nombre', validators=[DataRequired()])
    last_name = StringField('Apellido', validators=[DataRequired()])
    organization = StringField('Nombre Organización', validators=[DataRequired()])
    position = StringField('Cargo', validators=[DataRequired()])
    phone = StringField('Número Telefónico', validators=[DataRequired()])
    email = StringField('Correo Electrónico', validators=[DataRequired(), Email()])
    website = StringField('Página Web', validators=[DataRequired(), URL()])
    address = StringField('Dirección', validators=[DataRequired()])
    image_file = FileField('Foto de Perfil', validators=[FileAllowed(['jpg', 'jpeg', 'png'], 'Solo se permiten imágenes.')])
    submit = SubmitField('Crear Tarjeta')

class EditPulzcardForm(FlaskForm):
    card_name = StringField('Nombre de Tarjeta', validators=[DataRequired(), Length(max=100)])
    first_name = StringField('Nombre', validators=[DataRequired(), Length(max=50)])
    last_name = StringField('Apellido', validators=[DataRequired(), Length(max=50)])
    organization = StringField('Nombre Organización', validators=[DataRequired(), Length(max=100)])
    position = StringField('Cargo', validators=[DataRequired(), Length(max=100)])
    phone = StringField('Número Telefónico', validators=[DataRequired(), Length(max=20)])
    email = StringField('Correo Electrónico', validators=[DataRequired(), Email(), Length(max=120)])
    website = StringField('Página Web', validators=[DataRequired(), URL(), Length(max=200)])
    address = StringField('Dirección', validators=[DataRequired(), Length(max=200)])
    
    # Campo para la imagen de perfil
    image_file = FileField('Foto de Perfil', validators=[FileAllowed(['jpg', 'jpeg', 'png'], 'Solo se permiten imágenes.')])

    submit = SubmitField('Actualizar Pulzcard')

class DeletePulzcardForm(FlaskForm):
    submit = SubmitField('Eliminar')

class OrderForm(FlaskForm):
    nombre = StringField('Nombre', validators=[DataRequired()])
    email = StringField('Correo Electrónico', validators=[DataRequired(), Email()])
    dispositivo = StringField('Dispositivo', validators=[DataRequired()])
    mensaje = TextAreaField('¿Qué necesitas?', validators=[DataRequired()])
    logos = FileField('Subir Logos', validators=[Optional()])
    excel = FileField('Subir Archivo Excel', validators=[Optional()])
    submit = SubmitField('Enviar solicitud')

class ContactForm(FlaskForm):  # Nuevo formulario de contacto
    nombre = StringField('Nombre', validators=[DataRequired()])
    email = EmailField('Correo Electrónico', validators=[DataRequired(), Email()])
    mensaje = TextAreaField('Mensaje', validators=[DataRequired()])
    submit = SubmitField('Enviar')

class TagForm(FlaskForm):
    tag_name = StringField('Nombre de la Etiqueta', validators=[DataRequired(), Length(min=2, max=50)])
    redirect_url = StringField('URL a Redireccionar', validators=[DataRequired(), URL(), Length(max=200)])
    submit = SubmitField('Crear Etiqueta')

class EditTagForm(FlaskForm):
    tag_name = StringField('Nombre de Tu Etiqueta', validators=[DataRequired(), Length(max=100)])
    redirect_url = StringField('URL a redireccionar', validators=[DataRequired(), URL(), Length(max=200)])
    submit = SubmitField('Actualizar')

class DeleteTagForm(FlaskForm):
    submit = SubmitField('Eliminar')

----- Fin de forms.py -----

----- Inicio de minimal_app.py -----
# minimal_app.py

import os

from flask import Flask
from extensions import db, migrate

app = Flask(__name__, instance_relative_config=True)

# Crear el directorio 'instance' si no existe
instance_dir = os.path.join(app.instance_path)
os.makedirs(instance_dir, exist_ok=True)

app.config['SQLALCHEMY_DATABASE_URI'] = f'sqlite:///{os.path.join(instance_dir, "site_new.db")}'
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
app.secret_key = os.getenv('SECRET_KEY', 'test_secret_key')

db.init_app(app)
migrate.init_app(app, db)

class User(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(20), unique=True, nullable=False)
    email = db.Column(db.String(120), unique=True, nullable=False)
    password = db.Column(db.String(60), nullable=False)

if __name__ == '__main__':
    with app.app_context():
        db.create_all()  # Asegura que la base de datos y las tablas se creen
    app.run(debug=os.getenv('FLASK_DEBUG', 'False') == 'True')

----- Fin de minimal_app.py -----

----- Inicio de models.py -----
# models.py

from extensions import db
from flask_admin.contrib.sqla import ModelView
from flask_login import UserMixin, current_user
from itsdangerous import URLSafeTimedSerializer, SignatureExpired
from flask import current_app, redirect, url_for, flash, request
from datetime import datetime
import uuid

class User(db.Model, UserMixin):
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(20), unique=True, nullable=False)
    email = db.Column(db.String(120), unique=True, nullable=False)
    password = db.Column(db.String(60), nullable=False)
    is_admin = db.Column(db.Boolean, default=False)
    is_verified = db.Column(db.Boolean, default=False)  # Campo para marcar si el usuario está verificado
    verification_code = db.Column(db.String(6), nullable=True)  # Código de verificación temporal
    # Relación con Pulzcards
    pulzcards = db.relationship('Pulzcard', backref='owner', lazy=True)

    def get_reset_token(self, expires_sec=3600):
        s = URLSafeTimedSerializer(current_app.config['SECRET_KEY'])
        return s.dumps(self.email, salt='password-reset-salt')

    @staticmethod
    def verify_reset_token(token, expires_sec=3600):
        s = URLSafeTimedSerializer(current_app.config['SECRET_KEY'])
        try:
            email = s.loads(token, salt='password-reset-salt', max_age=expires_sec)
        except SignatureExpired:
            return None
        except:
            return None
        return User.query.filter_by(email=email).first()

class Pulzcard(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    card_name = db.Column(db.String(100), nullable=False)
    first_name = db.Column(db.String(50), nullable=False)
    last_name = db.Column(db.String(50), nullable=False)
    organization = db.Column(db.String(100), nullable=False)
    position = db.Column(db.String(100), nullable=False)
    phone = db.Column(db.String(20), nullable=False)
    email = db.Column(db.String(120), nullable=False)
    website = db.Column(db.String(200), nullable=False)
    address = db.Column(db.String(200), nullable=False)
    card_id = db.Column(db.String(36), unique=True, nullable=False, default=lambda: str(uuid.uuid4()))
    created_at = db.Column(db.DateTime, nullable=False, default=datetime.utcnow)
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)
    image_file = db.Column(db.String(100), nullable=True, default='default.jpg')

    def __repr__(self):
        return f"Pulzcard('{self.card_name}', '{self.email}')"
    
class Tag(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    tag_name = db.Column(db.String(100), nullable=False)
    redirect_url = db.Column(db.String(200), nullable=False)
    created_at = db.Column(db.DateTime, nullable=False, default=datetime.utcnow)
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)
    tag_id = db.Column(db.String(36), unique=True, nullable=False, default=lambda: str(uuid.uuid4()))
    
    def __repr__(self):
        return f"Tag('{self.tag_name}', '{self.redirect_url}', '{self.tag_id}')"
    
class SecureModelView(ModelView):
    def is_accessible(self):
        return current_user.is_authenticated and current_user.is_admin  # Verifica si el usuario es admin

    def inaccessible_callback(self, name, **kwargs):
        return redirect(url_for('login', next=request.url))

----- Fin de models.py -----

----- Inicio de requirements.txt -----
alembic==1.13.3
Authlib==1.3.2
bcrypt==4.2.0
blinker==1.8.2
cffi==1.17.1
click==8.1.7
cryptography==43.0.3
dnspython==2.7.0
email_validator==2.2.0
et-xmlfile==1.1.0
Flask==3.0.3
Flask-Admin==1.6.1
Flask-Bcrypt==1.0.1
Flask-FontAwesome==0.1.5
Flask-Login==0.6.3
Flask-Mail==0.10.0
Flask-Migrate==4.0.7
Flask-SQLAlchemy==3.1.1
Flask-WTF==1.2.1
gunicorn==23.0.0
idna==3.10
itsdangerous==2.2.0
Jinja2==3.1.4
Mako==1.3.5
MarkupSafe==2.1.5
numpy==1.26.1
openpyxl==3.1.5
packaging==24.1
pandas==2.2.3
pillow==10.4.0
psycopg2-binary==2.9.10
pycparser==2.22
pypng==0.20220715.0
python-dateutil==2.9.0.post0
python-dotenv==1.0.1
pytz==2024.2
qrcode==7.4.2
six==1.16.0
SQLAlchemy==2.0.36
typing_extensions==4.12.2
tzdata==2024.2
Werkzeug==3.0.4
WTForms==3.1.2
XlsxWriter==3.2.0


----- Fin de requirements.txt -----

----- Inicio de site_backup.db -----


----- Fin de site_backup.db -----

----- Inicio de test_db.py -----
# test_db.py

from sqlalchemy import create_engine
import os

basedir = os.path.abspath(os.path.dirname(__file__))
db_path = os.path.join(basedir, 'instance', 'site_new.db')
db_uri = f'sqlite:///{db_path}'

engine = create_engine(db_uri)

try:
    connection = engine.connect()
    print("Conexión exitosa a la base de datos.")
    connection.close()
except Exception as e:
    print(f"Error al conectar a la base de datos: {e}")

----- Fin de test_db.py -----

----- Inicio de instance/site_new.db -----
----- No se pudo leer instance/site_new.db (archivo binario o no decodable) -----

----- Fin de instance/site_new.db -----

----- migrations/__pycache__/__init__.cpython-311.pyc no encontrado -----

